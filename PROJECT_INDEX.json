{
  "indexed_at": "2025-08-18T13:50:01.278150",
  "root": ".",
  "project_structure": {
    "type": "tree",
    "root": ".",
    "tree": [
      ".",
      "\u251c\u2500\u2500 docs/",
      "\u251c\u2500\u2500 examples/ (32 files)",
      "\u2502   \u251c\u2500\u2500 lerna_example/ (7 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 apps/ (2 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 api/ (1 files)",
      "\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 src/",
      "\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 package.json",
      "\u2502   \u2502   \u2502   \u2514\u2500\u2500 web/ (1 files)",
      "\u2502   \u2502   \u2502       \u251c\u2500\u2500 src/",
      "\u2502   \u2502   \u2502       \u2514\u2500\u2500 package.json",
      "\u2502   \u2502   \u251c\u2500\u2500 packages/ (3 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 core/ (1 files)",
      "\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 src/",
      "\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 package.json",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 ui/ (1 files)",
      "\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 src/",
      "\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 package.json",
      "\u2502   \u2502   \u2502   \u2514\u2500\u2500 utils/ (1 files)",
      "\u2502   \u2502   \u2502       \u251c\u2500\u2500 src/",
      "\u2502   \u2502   \u2502       \u2514\u2500\u2500 package.json",
      "\u2502   \u2502   \u251c\u2500\u2500 package.json",
      "\u2502   \u2502   \u2514\u2500\u2500 README.md",
      "\u2502   \u251c\u2500\u2500 manual_config_example/ (10 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 backend/ (2 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 api/ (1 files)",
      "\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 src/",
      "\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 package.json",
      "\u2502   \u2502   \u2502   \u2514\u2500\u2500 auth/ (1 files)",
      "\u2502   \u2502   \u2502       \u251c\u2500\u2500 src/",
      "\u2502   \u2502   \u2502       \u2514\u2500\u2500 package.json",
      "\u2502   \u2502   \u251c\u2500\u2500 frontend/ (2 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 mobile/ (1 files)",
      "\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 src/",
      "\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 package.json",
      "\u2502   \u2502   \u2502   \u2514\u2500\u2500 web/ (1 files)",
      "\u2502   \u2502   \u2502       \u251c\u2500\u2500 src/",
      "\u2502   \u2502   \u2502       \u2514\u2500\u2500 package.json",
      "\u2502   \u2502   \u251c\u2500\u2500 shared/ (2 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 types/ (1 files)",
      "\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 src/",
      "\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 package.json",
      "\u2502   \u2502   \u2502   \u2514\u2500\u2500 utils/ (1 files)",
      "\u2502   \u2502   \u2502       \u251c\u2500\u2500 src/",
      "\u2502   \u2502   \u2502       \u2514\u2500\u2500 package.json",
      "\u2502   \u2502   \u251c\u2500\u2500 tools/ (2 files)",
      "\u2502   \u2502   \u2502   \u2514\u2500\u2500 cli/ (1 files)",
      "\u2502   \u2502   \u2502       \u251c\u2500\u2500 src/",
      "\u2502   \u2502   \u2502       \u2514\u2500\u2500 package.json",
      "\u2502   \u2502   \u251c\u2500\u2500 package.json",
      "\u2502   \u2502   \u2514\u2500\u2500 README.md",
      "\u2502   \u251c\u2500\u2500 nx_example/ (7 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 apps/ (2 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 admin/ (1 files)",
      "\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 src/",
      "\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 package.json",
      "\u2502   \u2502   \u2502   \u2514\u2500\u2500 mobile/ (1 files)",
      "\u2502   \u2502   \u2502       \u251c\u2500\u2500 src/",
      "\u2502   \u2502   \u2502       \u2514\u2500\u2500 package.json",
      "\u2502   \u2502   \u251c\u2500\u2500 packages/ (3 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 api/ (1 files)",
      "\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 src/",
      "\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 package.json",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 shared/ (1 files)",
      "\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 src/",
      "\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 package.json",
      "\u2502   \u2502   \u2502   \u2514\u2500\u2500 web/ (1 files)",
      "\u2502   \u2502   \u2502       \u251c\u2500\u2500 src/",
      "\u2502   \u2502   \u2502       \u2514\u2500\u2500 package.json",
      "\u2502   \u2502   \u251c\u2500\u2500 package.json",
      "\u2502   \u2502   \u2514\u2500\u2500 README.md",
      "\u2502   \u251c\u2500\u2500 pnpm_example/ (8 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 apps/ (2 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 dashboard/ (1 files)",
      "\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 src/",
      "\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 package.json",
      "\u2502   \u2502   \u2502   \u2514\u2500\u2500 frontend/ (1 files)",
      "\u2502   \u2502   \u2502       \u251c\u2500\u2500 src/",
      "\u2502   \u2502   \u2502       \u2514\u2500\u2500 package.json",
      "\u2502   \u2502   \u251c\u2500\u2500 packages/ (3 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 auth/ (1 files)",
      "\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 src/",
      "\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 package.json",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 common/ (1 files)",
      "\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 src/",
      "\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 package.json",
      "\u2502   \u2502   \u2502   \u2514\u2500\u2500 database/ (1 files)",
      "\u2502   \u2502   \u2502       \u251c\u2500\u2500 src/",
      "\u2502   \u2502   \u2502       \u2514\u2500\u2500 package.json",
      "\u2502   \u2502   \u251c\u2500\u2500 services/ (2 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 api/ (1 files)",
      "\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 src/",
      "\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 package.json",
      "\u2502   \u2502   \u2502   \u2514\u2500\u2500 worker/ (1 files)",
      "\u2502   \u2502   \u2502       \u251c\u2500\u2500 src/",
      "\u2502   \u2502   \u2502       \u2514\u2500\u2500 package.json",
      "\u2502   \u2502   \u251c\u2500\u2500 package.json",
      "\u2502   \u2502   \u2514\u2500\u2500 README.md",
      "\u2502   \u251c\u2500\u2500 rush_example/",
      "\u2502   \u2514\u2500\u2500 yarn_example/",
      "\u251c\u2500\u2500 scripts/ (20 files)",
      "\u251c\u2500\u2500 tests/ (35 files)",
      "\u2502   \u2514\u2500\u2500 fixtures/ (19 files)",
      "\u2502       \u251c\u2500\u2500 lerna_monorepo/ (4 files)",
      "\u2502       \u2502   \u251c\u2500\u2500 packages/ (1 files)",
      "\u2502       \u2502   \u2502   \u251c\u2500\u2500 api/ (1 files)",
      "\u2502       \u2502   \u2502   \u2502   \u2514\u2500\u2500 package.json",
      "\u2502       \u2502   \u2502   \u251c\u2500\u2500 utils/",
      "\u2502       \u2502   \u2502   \u2514\u2500\u2500 web/",
      "\u2502       \u2502   \u2514\u2500\u2500 package.json",
      "\u2502       \u251c\u2500\u2500 manual_config/ (2 files)",
      "\u2502       \u2502   \u251c\u2500\u2500 projects/ (1 files)",
      "\u2502       \u2502   \u2502   \u2514\u2500\u2500 app/ (1 files)",
      "\u2502       \u2502   \u2502       \u2514\u2500\u2500 package.json",
      "\u2502       \u2502   \u2514\u2500\u2500 {projects/",
      "\u2502       \u2502       \u251c\u2500\u2500 app}/",
      "\u2502       \u2502       \u251c\u2500\u2500 lib}/",
      "\u2502       \u2502       \u2514\u2500\u2500 tools}/",
      "\u2502       \u251c\u2500\u2500 nx_monorepo/ (7 files)",
      "\u2502       \u2502   \u251c\u2500\u2500 apps/",
      "\u2502       \u2502   \u251c\u2500\u2500 libs/",
      "\u2502       \u2502   \u2514\u2500\u2500 packages/ (5 files)",
      "\u2502       \u2502       \u251c\u2500\u2500 api/ (2 files)",
      "\u2502       \u2502       \u2502   \u251c\u2500\u2500 src/ (1 files)",
      "\u2502       \u2502       \u2502   \u2514\u2500\u2500 package.json",
      "\u2502       \u2502       \u251c\u2500\u2500 shared/ (2 files)",
      "\u2502       \u2502       \u2502   \u251c\u2500\u2500 src/ (1 files)",
      "\u2502       \u2502       \u2502   \u2514\u2500\u2500 package.json",
      "\u2502       \u2502       \u2514\u2500\u2500 web/ (1 files)",
      "\u2502       \u2502           \u2514\u2500\u2500 package.json",
      "\u2502       \u251c\u2500\u2500 pnpm_workspaces/ (2 files)",
      "\u2502       \u2502   \u251c\u2500\u2500 packages/ (1 files)",
      "\u2502       \u2502   \u2502   \u251c\u2500\u2500 core/ (1 files)",
      "\u2502       \u2502   \u2502   \u2502   \u2514\u2500\u2500 package.json",
      "\u2502       \u2502   \u2502   \u251c\u2500\u2500 ui/",
      "\u2502       \u2502   \u2502   \u2514\u2500\u2500 utils/",
      "\u2502       \u2502   \u251c\u2500\u2500 services/",
      "\u2502       \u2502   \u2502   \u251c\u2500\u2500 api/",
      "\u2502       \u2502   \u2502   \u2514\u2500\u2500 auth/",
      "\u2502       \u2502   \u2514\u2500\u2500 package.json",
      "\u2502       \u251c\u2500\u2500 rush_monorepo/ (2 files)",
      "\u2502       \u2502   \u251c\u2500\u2500 apps/ (1 files)",
      "\u2502       \u2502   \u2502   \u251c\u2500\u2500 admin/",
      "\u2502       \u2502   \u2502   \u2514\u2500\u2500 website/ (1 files)",
      "\u2502       \u2502   \u2502       \u2514\u2500\u2500 package.json",
      "\u2502       \u2502   \u2514\u2500\u2500 libraries/",
      "\u2502       \u2502       \u251c\u2500\u2500 shared-utils/",
      "\u2502       \u2502       \u2514\u2500\u2500 ui-components/",
      "\u2502       \u2514\u2500\u2500 yarn_workspaces/ (2 files)",
      "\u2502           \u251c\u2500\u2500 apps/",
      "\u2502           \u2502   \u251c\u2500\u2500 mobile-app/",
      "\u2502           \u2502   \u2514\u2500\u2500 web-app/",
      "\u2502           \u251c\u2500\u2500 packages/ (1 files)",
      "\u2502           \u2502   \u251c\u2500\u2500 backend/",
      "\u2502           \u2502   \u251c\u2500\u2500 frontend/ (1 files)",
      "\u2502           \u2502   \u2502   \u2514\u2500\u2500 package.json",
      "\u2502           \u2502   \u2514\u2500\u2500 shared/",
      "\u2502           \u2514\u2500\u2500 package.json",
      "\u2514\u2500\u2500 README.md"
    ]
  },
  "documentation_map": {
    "MONOREPO_MCD.md": {
      "sections": [
        "Monorepo Support MCD (Main Context Document)",
        "\ud83c\udfaf Overview & Goals",
        "Project Vision",
        "Target Users",
        "Core Features",
        "Success Criteria",
        "Business Context",
        "\ud83c\udfd7\ufe0f Technical Architecture",
        "Hierarchical Index Architecture (Option A)",
        "\ud83d\udccb Detailed Implementation"
      ],
      "architecture_hints": []
    },
    "README.md": {
      "sections": [
        "Project Index for Claude Code (v0.1.0)",
        "\ud83c\udf1f New in v0.1.0: Complete Monorepo Support",
        "\ud83d\ude80 Quick Install",
        "\ud83d\udcd6 Usage",
        "Create an Index for Your Project",
        "Using the Index",
        "Ask architectural questions",
        "Or auto-load in every session by adding to CLAUDE.md:",
        "Add @PROJECT_INDEX.json to your CLAUDE.md file",
        "\ud83d\udce6 Updating"
      ],
      "architecture_hints": []
    },
    "docs/configuration-reference.md": {
      "sections": [
        "Configuration Reference",
        "Configuration Files",
        "Manual Configuration File",
        "Global Configuration Options",
        "Basic Settings",
        "Performance Settings",
        "Analysis Settings",
        "Workspace Configuration",
        "Workspace Options",
        "Performance Modes"
      ],
      "architecture_hints": []
    },
    "docs/monorepo-setup.md": {
      "sections": [
        "Monorepo Setup Guide",
        "Quick Start",
        "Install the project indexer",
        "Index your monorepo (automatic detection)",
        "Supported Monorepo Tools",
        "Nx Monorepo",
        "1. Ensure nx.json exists with project configurations",
        "Should contain projects configuration",
        "2. Run indexing",
        "3. Verify detection"
      ],
      "architecture_hints": []
    },
    "docs/performance-guide.md": {
      "sections": [
        "Performance Guide",
        "Performance Targets",
        "Performance Modes",
        "Overview",
        "Fast Mode",
        "Balanced Mode (Default)",
        "Comprehensive Mode",
        "Optimization Strategies",
        "1. Ignore Pattern Optimization",
        "2. Parallel Processing Optimization"
      ],
      "architecture_hints": []
    },
    "docs/troubleshooting.md": {
      "sections": [
        "Troubleshooting Guide",
        "Quick Diagnostics",
        "Check basic system health",
        "Validate configuration",
        "Test workspace detection",
        "Performance check",
        "Common Issues and Solutions",
        "1. Monorepo Not Detected",
        "Check for configuration files",
        "Test detection manually"
      ],
      "architecture_hints": []
    },
    "docs/migration-guide.md": {
      "sections": [
        "Migration Guide: Single-Repo to Monorepo",
        "Overview",
        "Pre-Migration Checklist",
        "Migration Scenarios",
        "Scenario 1: Existing Monorepo, No Index",
        "1. Install Project Index",
        "2. Run automatic detection",
        "3. Verify monorepo detection",
        "4. Add to CLAUDE.md",
        "Scenario 2: Single Repo \u2192 Monorepo Conversion"
      ],
      "architecture_hints": []
    },
    "docs/api-reference.md": {
      "sections": [
        "API Reference",
        "Core Modules",
        "`monorepo_detector.py`",
        "`workspace_config.py`",
        "`workspace_indexer.py`"
      ],
      "architecture_hints": []
    },
    "examples/nx_example/README.md": {
      "sections": [
        "Nx Monorepo Example",
        "Structure",
        "Workspaces",
        "Dependencies",
        "Setup Instructions",
        "Expected Output",
        "Commands",
        "Index specific workspace",
        "View dependencies",
        "Performance check"
      ],
      "architecture_hints": []
    },
    "examples/lerna_example/README.md": {
      "sections": [
        "Lerna Monorepo Example",
        "Structure",
        "Workspaces",
        "Packages (Published)",
        "Apps (Private)",
        "Key Features",
        "Setup Instructions",
        "Expected Output",
        "Lerna Commands",
        "Development Workflow"
      ],
      "architecture_hints": []
    },
    "examples/manual_config_example/README.md": {
      "sections": [
        "Manual Configuration Example",
        "Structure",
        "Key Features",
        "Manual Workspace Configuration",
        "Advanced Configuration Options",
        "Multi-Language Support",
        "Workspaces",
        "Backend Services",
        "Frontend Applications  ",
        "Shared Libraries"
      ],
      "architecture_hints": []
    },
    "examples/pnpm_example/README.md": {
      "sections": [
        "PNPM Workspace Example",
        "Structure",
        "Workspaces",
        "Packages (Published)",
        "Services (Private)",
        "Apps (Private)",
        "Key PNPM Features Demonstrated",
        "Dependency Catalog",
        "Workspace Protocol",
        "Filtering and Targeting"
      ],
      "architecture_hints": []
    }
  },
  "directory_purposes": {
    "scripts": "Build and utility scripts",
    "docs": "Project documentation",
    "examples/manual_config_example": "Configuration files and settings",
    "examples/pnpm_example/packages/auth": "Authentication and authorization logic",
    "examples/pnpm_example/services/api": "API endpoints and route handlers",
    "examples/manual_config_example/backend/api": "API endpoints and route handlers",
    "examples/manual_config_example/backend/auth": "Authentication and authorization logic",
    "examples/manual_config_example/shared/utils": "Shared utility functions and helpers",
    "examples/lerna_example/packages/utils": "Shared utility functions and helpers",
    "examples/lerna_example/apps/api": "API endpoints and route handlers",
    "examples/nx_example/packages/api": "API endpoints and route handlers",
    "tests/fixtures/manual_config": "Configuration files and settings",
    "tests/fixtures/lerna_monorepo/packages/api": "API endpoints and route handlers",
    "tests/fixtures/nx_monorepo/packages/api": "API endpoints and route handlers",
    "tests/fixtures/nx_monorepo/packages/api/src": "Source code root directory",
    "tests/fixtures/nx_monorepo/packages/shared/src": "Source code root directory"
  },
  "stats": {
    "total_files": 74,
    "total_directories": 121,
    "fully_parsed": {
      "python": 15,
      "shell": 1,
      "typescript": 2
    },
    "listed_only": {
      "shell": 4,
      "json": 52
    },
    "markdown_files": 16
  },
  "files": {
    "install.sh": {
      "language": "shell",
      "parsed": false
    },
    ".mcp.json": {
      "language": "json",
      "parsed": false
    },
    "uninstall.sh": {
      "language": "shell",
      "parsed": false
    },
    "run_coverage.py": {
      "language": "python",
      "parsed": true,
      "imports": [
        "sys",
        "subprocess",
        "time",
        "pathlib"
      ],
      "functions": {
        "run_test_file": {
          "doc": "Run a single test file and return results.",
          "signature": "(test_file)",
          "called_by": [
            "main"
          ]
        },
        "main": {
          "doc": "Run all test files and summarize results.",
          "calls": [
            "run_test_file"
          ],
          "signature": "()"
        }
      },
      "classes": {},
      "call_graph": {}
    },
    ".agent/config.json": {
      "language": "json",
      "parsed": false,
      "purpose": "Configuration"
    },
    ".claude/settings.local.json": {
      "language": "json",
      "parsed": false,
      "purpose": "Configuration"
    },
    "scripts/reindex_if_needed_enhanced.py": {
      "language": "python",
      "parsed": true,
      "imports": [
        "json",
        "sys",
        "os",
        "subprocess",
        "time",
        "pathlib",
        "datetime",
        "typing",
        "workspace_config",
        "workspace_indexer"
      ],
      "functions": {
        "find_project_modules": {
          "doc": "Find project modules in project or system location.",
          "signature": "()"
        },
        "get_workspace_config_cached": {
          "doc": "Get workspace configuration with caching.",
          "signature": "(project_root: Path) -> Optional[Dict]",
          "called_by": [
            "check_workspace_staleness",
            "check_workspace_configuration_changes",
            "run_workspace_reindex",
            "run_reindex",
            "update_root_index_after_workspace_reindex",
            "main",
            "get_workspace_for_file",
            "get_workspace_index_path",
            "get_dependent_workspaces",
            "update_root_index_workspace_registry",
            "handle_file_update",
            "check_workspace_staleness",
            "check_workspace_configuration_changes",
            "run_workspace_reindex",
            "run_reindex",
            "update_root_index_after_workspace_reindex",
            "main",
            "get_workspace_for_file",
            "get_workspace_index_path",
            "get_dependent_workspaces",
            "handle_cross_workspace_dependencies",
            "update_root_index_workspace_registry",
            "detect_file_move",
            "handle_file_update"
          ]
        },
        "check_index_features": {
          "doc": "Check if index has all required features.",
          "signature": "(index_path: Path) -> Tuple[bool, Optional[str]]",
          "called_by": [
            "check_workspace_staleness",
            "handle_single_repo_reindex",
            "check_workspace_staleness",
            "handle_single_repo_reindex"
          ]
        },
        "check_index_staleness": {
          "doc": "Check if index is older than threshold.",
          "signature": "(index_path: Path, threshold_hours: int = 24) -> bool",
          "called_by": [
            "check_workspace_staleness",
            "handle_single_repo_reindex",
            "check_workspace_staleness",
            "handle_single_repo_reindex"
          ]
        },
        "check_workspace_staleness": {
          "doc": "Check if a specific workspace is stale.",
          "calls": [
            "check_index_features",
            "check_index_staleness",
            "check_missing_documentation",
            "check_structural_changes",
            "count_hook_updates",
            "get_workspace_config_cached"
          ],
          "signature": "(workspace_name: str, project_root: Path) -> Tuple[bool, Optional[str]]",
          "called_by": [
            "handle_workspace_aware_reindex",
            "handle_workspace_aware_reindex"
          ]
        },
        "check_missing_documentation": {
          "doc": "Check if important documentation files are missing from index.",
          "signature": "(index_path: Path, workspace_root: Path) -> bool",
          "called_by": [
            "check_workspace_staleness",
            "handle_single_repo_reindex",
            "check_workspace_staleness",
            "handle_single_repo_reindex"
          ]
        },
        "check_structural_changes": {
          "doc": "Check if directory structure has significantly changed.",
          "signature": "(index_path: Path, workspace_root: Path) -> bool",
          "called_by": [
            "check_workspace_staleness",
            "handle_single_repo_reindex",
            "check_workspace_staleness",
            "handle_single_repo_reindex"
          ]
        },
        "count_hook_updates": {
          "doc": "Count how many files were updated by hooks vs full index.",
          "signature": "(index_path: Path) -> Tuple[int, int]",
          "called_by": [
            "check_workspace_staleness",
            "handle_single_repo_reindex",
            "check_workspace_staleness",
            "handle_single_repo_reindex"
          ]
        },
        "check_workspace_configuration_changes": {
          "doc": "Check if workspace configuration has changed.",
          "calls": [
            "get_workspace_config_cached"
          ],
          "signature": "(project_root: Path) -> Tuple[bool, List[str]]",
          "called_by": [
            "handle_workspace_aware_reindex",
            "handle_workspace_aware_reindex"
          ]
        },
        "run_workspace_reindex": {
          "doc": "Run reindex for a specific workspace.",
          "calls": [
            "get_workspace_config_cached"
          ],
          "signature": "(workspace_name: str, project_root: Path) -> bool",
          "called_by": [
            "run_reindex",
            "run_reindex"
          ]
        },
        "run_reindex": {
          "doc": "Run reindexing with workspace awareness.",
          "calls": [
            "get_workspace_config_cached",
            "run_reindex",
            "run_single_repo_reindex",
            "run_workspace_reindex",
            "update_root_index_after_workspace_reindex"
          ],
          "signature": "(project_root: Path, selective_workspaces: Optional[List[str]] = None) -> bool",
          "called_by": [
            "run_reindex",
            "handle_workspace_aware_reindex",
            "run_reindex",
            "handle_workspace_aware_reindex"
          ]
        },
        "run_single_repo_reindex": {
          "doc": "Run traditional single-repo reindex.",
          "signature": "(project_root: Path) -> bool",
          "called_by": [
            "run_reindex",
            "handle_single_repo_reindex",
            "run_reindex",
            "handle_single_repo_reindex"
          ]
        },
        "update_root_index_after_workspace_reindex": {
          "doc": "Update root index after workspace reindexing.",
          "calls": [
            "get_workspace_config_cached"
          ],
          "signature": "(project_root: Path, reindexed_workspaces: List[str]) -> None",
          "called_by": [
            "run_reindex",
            "run_reindex"
          ]
        },
        "main": {
          "doc": "Main hook entry point with workspace awareness.",
          "calls": [
            "get_workspace_config_cached",
            "handle_single_repo_reindex",
            "handle_workspace_aware_reindex"
          ],
          "signature": "()"
        },
        "handle_single_repo_reindex": {
          "doc": "Handle single-repo reindexing logic.",
          "calls": [
            "check_index_features",
            "check_index_staleness",
            "check_missing_documentation",
            "check_structural_changes",
            "count_hook_updates",
            "run_single_repo_reindex"
          ],
          "signature": "(root_index_path: Path, project_root: Path) -> None",
          "called_by": [
            "main",
            "main"
          ]
        },
        "handle_workspace_aware_reindex": {
          "doc": "Handle workspace-aware reindexing logic.",
          "calls": [
            "check_workspace_configuration_changes",
            "check_workspace_staleness",
            "run_reindex"
          ],
          "signature": "(project_root: Path, workspace_config: Dict) -> None",
          "called_by": [
            "main",
            "main"
          ]
        }
      },
      "classes": {},
      "constants": {
        "CACHE_TTL": "number"
      },
      "call_graph": {}
    },
    "scripts/cross_workspace_analyzer.py": {
      "language": "python",
      "parsed": true,
      "imports": [
        "json",
        "re",
        "ast",
        "os",
        "pathlib",
        "typing",
        "collections",
        "dataclasses",
        "workspace_config",
        "sys",
        "workspace_config"
      ],
      "functions": {
        "build_cross_workspace_dependencies": {
          "calls": [
            "analyze_all_workspaces"
          ],
          "signature": "(registry: WorkspaceRegistry) -> Dict[str, Dict]"
        }
      },
      "classes": {
        "ImportInfo": {
          "methods": {
            "__post_init__": "(self)"
          },
          "decorators": [
            "dataclass"
          ],
          "doc": "Information about a cross-workspace import.",
          "properties": [
            "source_workspace",
            "target_workspace",
            "source_file",
            "import_statement",
            "import_type",
            "shared_types"
          ]
        },
        "CircularDependency": {
          "methods": {},
          "decorators": [
            "dataclass"
          ],
          "doc": "Information about a circular dependency.",
          "properties": [
            "cycle",
            "imports",
            "severity"
          ]
        },
        "CrossWorkspaceAnalyzer": {
          "methods": {
            "__init__": {
              "calls": [
                "_load_typescript_references",
                "_load_workspace_packages"
              ],
              "signature": "(self, registry: WorkspaceRegistry)"
            },
            "_load_workspace_packages": {
              "doc": "Load package.json from each workspace to understand package names and dependencies.",
              "signature": "(self) -> Dict[str, Dict]",
              "called_by": [
                "CrossWorkspaceDependencyAnalyzer.__init__",
                "CrossWorkspaceAnalyzer.__init__"
              ]
            },
            "_load_typescript_references": {
              "doc": "Load TypeScript project references from tsconfig.json files.",
              "signature": "(self) -> Dict[str, List[str]]",
              "called_by": [
                "CrossWorkspaceAnalyzer.__init__"
              ]
            },
            "analyze_all_workspaces": {
              "calls": [
                "_analyze_workspace_imports",
                "_build_bidirectional_relationships",
                "_build_dependency_graph",
                "_circular_dep_to_dict",
                "_detect_circular_dependencies",
                "_extract_shared_types"
              ],
              "signature": "(self) -> Dict[str, Dict]",
              "called_by": [
                "build_cross_workspace_dependencies"
              ]
            },
            "_analyze_workspace_imports": {
              "doc": "Analyze all imports in a workspace for cross-workspace dependencies.",
              "calls": [
                "_analyze_file_imports",
                "_analyze_package_dependencies"
              ],
              "signature": "(self, workspace: WorkspaceConfig) -> List[ImportInfo]",
              "called_by": [
                "CrossWorkspaceAnalyzer.analyze_all_workspaces"
              ]
            },
            "_analyze_file_imports": {
              "doc": "Analyze imports in a single file.",
              "calls": [
                "_analyze_javascript_imports",
                "_analyze_python_imports"
              ],
              "signature": "(self, file_path: Path, workspace: WorkspaceConfig) -> List[ImportInfo]",
              "called_by": [
                "CrossWorkspaceAnalyzer._analyze_workspace_imports"
              ]
            },
            "_analyze_python_imports": {
              "doc": "Analyze Python imports for cross-workspace dependencies with AST parsing.",
              "calls": [
                "_analyze_python_imports_regex",
                "_extract_python_types_from_import",
                "_filter_type_names",
                "_resolve_python_import"
              ],
              "signature": "(self, content: str, workspace: WorkspaceConfig, file_path: str) -> List[ImportInfo]",
              "called_by": [
                "CrossWorkspaceAnalyzer._analyze_file_imports",
                "CrossWorkspaceDependencyAnalyzer.analyze_file_imports"
              ]
            },
            "_analyze_python_imports_regex": {
              "doc": "Fallback regex-based Python import analysis.",
              "calls": [
                "_filter_type_names",
                "_resolve_python_import"
              ],
              "signature": "(self, content: str, workspace: WorkspaceConfig, file_path: str) -> List[ImportInfo]",
              "called_by": [
                "CrossWorkspaceAnalyzer._analyze_python_imports"
              ]
            },
            "_analyze_javascript_imports": {
              "doc": "Analyze JavaScript/TypeScript imports for cross-workspace dependencies.",
              "calls": [
                "_filter_type_names",
                "_resolve_javascript_import"
              ],
              "signature": "(self, content: str, workspace: WorkspaceConfig, file_path: str) -> List[ImportInfo]",
              "called_by": [
                "CrossWorkspaceAnalyzer._analyze_file_imports",
                "CrossWorkspaceDependencyAnalyzer.analyze_file_imports"
              ]
            },
            "_resolve_python_import": {
              "doc": "Resolve a Python import to a workspace name.",
              "calls": [
                "_resolve_relative_python_import"
              ],
              "signature": "(self, import_path: str, workspace: WorkspaceConfig) -> Optional[str]",
              "called_by": [
                "CrossWorkspaceAnalyzer._analyze_python_imports",
                "CrossWorkspaceAnalyzer._analyze_python_imports_regex"
              ]
            },
            "_resolve_javascript_import": {
              "doc": "Resolve a JavaScript/TypeScript import to a workspace name and import type.",
              "calls": [
                "_resolve_relative_javascript_import"
              ],
              "signature": "(self, import_path: str, workspace: WorkspaceConfig) -> Tuple[Optional[str], str]",
              "called_by": [
                "CrossWorkspaceAnalyzer._analyze_javascript_imports"
              ]
            },
            "_resolve_relative_python_import": {
              "doc": "Resolve relative Python imports that might cross workspace boundaries.",
              "signature": "(self, import_path: str, workspace: WorkspaceConfig) -> Optional[str]",
              "called_by": [
                "CrossWorkspaceAnalyzer._resolve_python_import"
              ]
            },
            "_resolve_relative_javascript_import": {
              "doc": "Resolve relative JavaScript/TypeScript imports that might cross workspace boundaries.",
              "signature": "(self, import_path: str, workspace: WorkspaceConfig) -> Tuple[Optional[str], str]",
              "called_by": [
                "CrossWorkspaceAnalyzer._resolve_javascript_import"
              ]
            },
            "_analyze_package_dependencies": {
              "doc": "Analyze package.json dependencies for cross-workspace references.",
              "signature": "(self, workspace: WorkspaceConfig) -> List[ImportInfo]",
              "called_by": [
                "CrossWorkspaceAnalyzer._analyze_workspace_imports"
              ]
            },
            "_build_dependency_graph": {
              "doc": "Build the cross-workspace dependency graph.",
              "signature": "(self, imports: List[ImportInfo]) -> Dict[str, Dict]",
              "called_by": [
                "CrossWorkspaceAnalyzer.analyze_all_workspaces"
              ]
            },
            "_detect_circular_dependencies": {
              "doc": "Detect circular dependencies using DFS algorithm.",
              "calls": [
                "_determine_cycle_severity",
                "dfs"
              ],
              "signature": "(self, dependency_graph: Dict[str, Dict]) -> List[CircularDependency]",
              "called_by": [
                "CrossWorkspaceAnalyzer.analyze_all_workspaces"
              ]
            },
            "dfs": {
              "calls": [
                "_determine_cycle_severity",
                "dfs"
              ],
              "signature": "(node: str, path: List[str]) -> None",
              "called_by": [
                "CrossWorkspaceAnalyzer.dfs",
                "CrossWorkspaceAnalyzer._detect_circular_dependencies"
              ]
            },
            "_determine_cycle_severity": {
              "doc": "Determine the severity of a circular dependency.",
              "signature": "(self, cycle: List[str]) -> str",
              "called_by": [
                "CrossWorkspaceAnalyzer.dfs",
                "CrossWorkspaceAnalyzer._detect_circular_dependencies"
              ]
            },
            "_extract_shared_types": {
              "doc": "Extract shared types and interfaces from imports.",
              "signature": "(self, imports: List[ImportInfo]) -> Dict[str, List[str]]",
              "called_by": [
                "CrossWorkspaceAnalyzer.analyze_all_workspaces"
              ]
            },
            "_build_bidirectional_relationships": {
              "doc": "Build bidirectional relationship mapping for refactoring impact analysis.",
              "signature": "(self, dependency_graph: Dict[str, Dict]) -> Dict[str, Dict]",
              "called_by": [
                "CrossWorkspaceAnalyzer.analyze_all_workspaces"
              ]
            },
            "_extract_python_types_from_import": {
              "doc": "Extract type names from Python imports.",
              "signature": "(self, import_name: str, content: str) -> List[str]",
              "called_by": [
                "CrossWorkspaceAnalyzer._analyze_python_imports"
              ]
            },
            "_filter_type_names": {
              "doc": "Filter a list of names to likely type/interface names.",
              "signature": "(self, names: List[str]) -> List[str]",
              "called_by": [
                "CrossWorkspaceAnalyzer._analyze_python_imports",
                "CrossWorkspaceAnalyzer._analyze_python_imports_regex",
                "CrossWorkspaceAnalyzer._analyze_javascript_imports"
              ]
            },
            "_circular_dep_to_dict": {
              "doc": "Convert CircularDependency to dictionary for serialization.",
              "signature": "(self, circular_dep: CircularDependency) -> Dict",
              "called_by": [
                "CrossWorkspaceAnalyzer.analyze_all_workspaces"
              ]
            }
          }
        }
      },
      "call_graph": {}
    },
    "scripts/project_index.py": {
      "language": "python",
      "parsed": true,
      "imports": [
        "json",
        "os",
        "re",
        "datetime",
        "pathlib",
        "typing",
        "index_utils",
        "workspace_config",
        "workspace_indexer",
        "cross_workspace_analyzer",
        "sys"
      ],
      "functions": {
        "generate_tree_structure": {
          "doc": "Generate a compact ASCII tree representation of the directory structure.",
          "calls": [
            "add_tree_level",
            "should_include_dir"
          ],
          "signature": "(root_path: Path, max_depth: int = MAX_TREE_DEPTH) -> List[str]",
          "called_by": [
            "build_index"
          ]
        },
        "_generate_monorepo_tree": {
          "doc": "Generate a high-level tree view for monorepos showing workspaces.",
          "signature": "(root_path: Path, registry) -> List[str]",
          "called_by": [
            "build_index"
          ]
        },
        "build_index": {
          "doc": "Build the enhanced index with architectural awareness.",
          "calls": [
            "_generate_monorepo_tree",
            "generate_tree_structure"
          ],
          "signature": "(root_dir: str) -> Tuple[Dict, int]",
          "called_by": [
            "main"
          ]
        },
        "compress_index_if_needed": {
          "doc": "Compress index if it exceeds size limit.",
          "signature": "(index: Dict) -> Dict",
          "called_by": [
            "main"
          ]
        },
        "print_summary": {
          "doc": "Print a helpful summary of what was indexed.",
          "calls": [
            "print_monorepo_summary"
          ],
          "signature": "(index: Dict, skipped_count: int)",
          "called_by": [
            "main"
          ]
        },
        "print_monorepo_summary": {
          "doc": "Print a summary for monorepo indexing.",
          "signature": "(index: Dict)",
          "called_by": [
            "print_summary"
          ]
        },
        "main": {
          "doc": "Run the enhanced indexer.",
          "calls": [
            "build_index",
            "compress_index_if_needed",
            "print_summary"
          ],
          "signature": "()"
        }
      },
      "classes": {},
      "constants": {
        "MAX_FILES": "number",
        "MAX_INDEX_SIZE": "value",
        "MAX_TREE_DEPTH": "number"
      },
      "call_graph": {}
    },
    "scripts/index_utils.py": {
      "language": "python",
      "parsed": true,
      "purpose": "Utility functions",
      "imports": [
        "re",
        "fnmatch",
        "pathlib",
        "typing"
      ],
      "functions": {
        "extract_function_calls_python": {
          "doc": "Extract function calls from Python code body.",
          "signature": "(body: str, all_functions: Set[str]) -> List[str]",
          "called_by": [
            "extract_python_signatures"
          ]
        },
        "extract_function_calls_javascript": {
          "doc": "Extract function calls from JavaScript/TypeScript code body.",
          "signature": "(body: str, all_functions: Set[str]) -> List[str]",
          "called_by": [
            "extract_javascript_signatures"
          ]
        },
        "build_call_graph": {
          "doc": "Build bidirectional call graph from extracted functions and methods.",
          "signature": "(functions: Dict, classes: Dict) -> Tuple[Dict, Dict]"
        },
        "extract_python_signatures": {
          "doc": "Extract Python function and class signatures with full details for all files.",
          "calls": [
            "extract_function_calls_python"
          ],
          "signature": "(content: str) -> Dict[str, Dict]"
        },
        "extract_javascript_signatures": {
          "doc": "Extract JavaScript/TypeScript function and class signatures with full details.",
          "calls": [
            "extract_function_calls_javascript"
          ],
          "signature": "(content: str) -> Dict[str, any]"
        },
        "extract_function_calls_shell": {
          "doc": "Extract function calls from shell script body.",
          "signature": "(body: str, all_functions: Set[str]) -> List[str]",
          "called_by": [
            "extract_shell_signatures"
          ]
        },
        "extract_shell_signatures": {
          "doc": "Extract shell script function signatures and structure.",
          "calls": [
            "extract_function_calls_shell"
          ],
          "signature": "(content: str) -> Dict[str, any]"
        },
        "extract_markdown_structure": {
          "doc": "Extract headers and architectural hints from markdown files.",
          "signature": "(file_path: Path) -> Dict[str, List[str]]"
        },
        "infer_file_purpose": {
          "doc": "Infer the purpose of a file from its name and location.",
          "signature": "(file_path: Path) -> Optional[str]"
        },
        "infer_directory_purpose": {
          "doc": "Infer directory purpose from naming patterns and contents.",
          "signature": "(path: Path, files_within: List[str]) -> Optional[str]"
        },
        "get_language_name": {
          "doc": "Get readable language name from extension.",
          "signature": "(extension: str) -> str"
        },
        "parse_gitignore": {
          "doc": "Parse a .gitignore file and return list of patterns.",
          "signature": "(gitignore_path: Path) -> List[str]",
          "called_by": [
            "load_gitignore_patterns"
          ]
        },
        "load_gitignore_patterns": {
          "doc": "Load all gitignore patterns from project root and merge with defaults.",
          "calls": [
            "parse_gitignore"
          ],
          "signature": "(root_path: Path) -> Set[str]",
          "called_by": [
            "should_index_file"
          ]
        },
        "matches_gitignore_pattern": {
          "doc": "Check if a path matches any gitignore pattern.",
          "signature": "(path: Path, patterns: Set[str], root_path: Path) -> bool",
          "called_by": [
            "should_index_file"
          ]
        },
        "should_index_file": {
          "doc": "Check if we should index this file.",
          "calls": [
            "load_gitignore_patterns",
            "matches_gitignore_pattern"
          ],
          "signature": "(path: Path, root_path: Path = None) -> bool"
        }
      },
      "classes": {},
      "constants": {
        "IGNORE_DIRS": "collection",
        "PARSEABLE_LANGUAGES": "collection",
        "CODE_EXTENSIONS": "collection",
        "MARKDOWN_EXTENSIONS": "collection",
        "DIRECTORY_PURPOSES": "collection"
      },
      "call_graph": {}
    },
    "scripts/update_index_enhanced.py": {
      "language": "python",
      "parsed": true,
      "imports": [
        "json",
        "sys",
        "os",
        "pathlib",
        "datetime",
        "typing",
        "time",
        "index_utils",
        "workspace_config",
        "workspace_indexer"
      ],
      "functions": {
        "find_project_modules": {
          "doc": "Find project modules (index_utils, workspace_config, etc.) in project or system location.",
          "signature": "()"
        },
        "get_workspace_config_cached": {
          "doc": "Get workspace configuration with caching.",
          "signature": "(project_root: Path) -> Optional[Dict]",
          "called_by": [
            "check_workspace_staleness",
            "check_workspace_configuration_changes",
            "run_workspace_reindex",
            "run_reindex",
            "update_root_index_after_workspace_reindex",
            "main",
            "get_workspace_for_file",
            "get_workspace_index_path",
            "get_dependent_workspaces",
            "update_root_index_workspace_registry",
            "handle_file_update",
            "check_workspace_staleness",
            "check_workspace_configuration_changes",
            "run_workspace_reindex",
            "run_reindex",
            "update_root_index_after_workspace_reindex",
            "main",
            "get_workspace_for_file",
            "get_workspace_index_path",
            "get_dependent_workspaces",
            "handle_cross_workspace_dependencies",
            "update_root_index_workspace_registry",
            "detect_file_move",
            "handle_file_update"
          ]
        },
        "get_workspace_for_file": {
          "doc": "Determine which workspace a file belongs to.",
          "calls": [
            "get_workspace_config_cached"
          ],
          "signature": "(file_path: Path, project_root: Path) -> Optional[str]",
          "called_by": [
            "handle_file_update",
            "detect_file_move",
            "handle_file_update"
          ]
        },
        "get_workspace_index_path": {
          "doc": "Get the path to a workspace's index file.",
          "calls": [
            "get_workspace_config_cached"
          ],
          "signature": "(workspace_name: str, project_root: Path) -> Optional[Path]",
          "called_by": [
            "update_workspace_index",
            "handle_cross_workspace_dependencies",
            "update_root_index_workspace_registry",
            "update_workspace_index",
            "handle_basic_cross_workspace_dependencies",
            "update_workspace_dependencies",
            "update_root_index_workspace_registry",
            "detect_file_move",
            "handle_cross_workspace_file_move"
          ]
        },
        "get_dependent_workspaces": {
          "doc": "Get list of workspaces that depend on the given workspace.",
          "calls": [
            "get_workspace_config_cached"
          ],
          "signature": "(workspace_name: str, project_root: Path) -> List[str]",
          "called_by": [
            "handle_cross_workspace_dependencies",
            "handle_basic_cross_workspace_dependencies"
          ]
        },
        "update_workspace_index": {
          "doc": "Update a specific workspace index.",
          "calls": [
            "get_workspace_index_path",
            "update_file_in_index"
          ],
          "signature": "(workspace_name: str, file_path: Path, project_root: Path) -> bool",
          "called_by": [
            "handle_file_update",
            "handle_file_update"
          ]
        },
        "handle_cross_workspace_dependencies": {
          "doc": "Handle cascade updates for dependent workspaces.",
          "calls": [
            "get_dependent_workspaces",
            "get_workspace_index_path"
          ],
          "signature": "(workspace_name: str, project_root: Path) -> None",
          "called_by": [
            "handle_file_update",
            "handle_cross_workspace_file_move",
            "handle_file_update"
          ]
        },
        "update_root_index_workspace_registry": {
          "doc": "Update the root index workspace registry when workspace relationships change.",
          "calls": [
            "get_workspace_config_cached",
            "get_workspace_index_path"
          ],
          "signature": "(project_root: Path) -> None",
          "called_by": [
            "handle_file_update",
            "handle_cross_workspace_file_move",
            "handle_file_update"
          ]
        },
        "update_file_in_index": {
          "doc": "Update a single file's entry in the enhanced index.",
          "signature": "(index_path: str, file_path: str, project_root: str) -> bool",
          "called_by": [
            "update_workspace_index",
            "handle_file_update",
            "update_workspace_index",
            "handle_file_update"
          ]
        },
        "handle_file_update": {
          "doc": "Handle a file update with workspace awareness.",
          "calls": [
            "get_workspace_config_cached",
            "get_workspace_for_file",
            "handle_cross_workspace_dependencies",
            "update_file_in_index",
            "update_root_index_workspace_registry",
            "update_workspace_index"
          ],
          "signature": "(file_path: Path, project_root: Path) -> None",
          "called_by": [
            "main",
            "main"
          ]
        },
        "main": {
          "doc": "Process PostToolUse hook input and update index with workspace awareness.",
          "calls": [
            "handle_file_update"
          ],
          "signature": "()"
        }
      },
      "classes": {},
      "constants": {
        "CACHE_TTL": "number"
      },
      "call_graph": {}
    },
    "scripts/reindex_if_needed.py": {
      "language": "python",
      "parsed": true,
      "imports": [
        "json",
        "sys",
        "os",
        "subprocess",
        "time",
        "pathlib",
        "datetime",
        "typing",
        "workspace_config",
        "workspace_indexer"
      ],
      "functions": {
        "find_project_modules": {
          "doc": "Find project modules in project or system location.",
          "signature": "()"
        },
        "get_workspace_config_cached": {
          "doc": "Get workspace configuration with caching.",
          "signature": "(project_root: Path) -> Optional[Dict]",
          "called_by": [
            "check_workspace_staleness",
            "check_workspace_configuration_changes",
            "run_workspace_reindex",
            "run_reindex",
            "update_root_index_after_workspace_reindex",
            "main",
            "get_workspace_for_file",
            "get_workspace_index_path",
            "get_dependent_workspaces",
            "update_root_index_workspace_registry",
            "handle_file_update",
            "check_workspace_staleness",
            "check_workspace_configuration_changes",
            "run_workspace_reindex",
            "run_reindex",
            "update_root_index_after_workspace_reindex",
            "main",
            "get_workspace_for_file",
            "get_workspace_index_path",
            "get_dependent_workspaces",
            "handle_cross_workspace_dependencies",
            "update_root_index_workspace_registry",
            "detect_file_move",
            "handle_file_update"
          ]
        },
        "check_index_features": {
          "doc": "Check if index has all required features.",
          "signature": "(index_path: Path) -> Tuple[bool, Optional[str]]",
          "called_by": [
            "check_workspace_staleness",
            "handle_single_repo_reindex",
            "check_workspace_staleness",
            "handle_single_repo_reindex"
          ]
        },
        "check_index_staleness": {
          "doc": "Check if index is older than threshold.",
          "signature": "(index_path: Path, threshold_hours: int = 24) -> bool",
          "called_by": [
            "check_workspace_staleness",
            "handle_single_repo_reindex",
            "check_workspace_staleness",
            "handle_single_repo_reindex"
          ]
        },
        "check_workspace_staleness": {
          "doc": "Check if a specific workspace is stale.",
          "calls": [
            "check_index_features",
            "check_index_staleness",
            "check_missing_documentation",
            "check_structural_changes",
            "count_hook_updates",
            "get_workspace_config_cached"
          ],
          "signature": "(workspace_name: str, project_root: Path) -> Tuple[bool, Optional[str]]",
          "called_by": [
            "handle_workspace_aware_reindex",
            "handle_workspace_aware_reindex"
          ]
        },
        "check_missing_documentation": {
          "doc": "Check if important documentation files are missing from index.",
          "signature": "(index_path: Path, workspace_root: Path) -> bool",
          "called_by": [
            "check_workspace_staleness",
            "handle_single_repo_reindex",
            "check_workspace_staleness",
            "handle_single_repo_reindex"
          ]
        },
        "check_structural_changes": {
          "doc": "Check if directory structure has significantly changed.",
          "signature": "(index_path: Path, workspace_root: Path) -> bool",
          "called_by": [
            "check_workspace_staleness",
            "handle_single_repo_reindex",
            "check_workspace_staleness",
            "handle_single_repo_reindex"
          ]
        },
        "count_hook_updates": {
          "doc": "Count how many files were updated by hooks vs full index.",
          "signature": "(index_path: Path) -> Tuple[int, int]",
          "called_by": [
            "check_workspace_staleness",
            "handle_single_repo_reindex",
            "check_workspace_staleness",
            "handle_single_repo_reindex"
          ]
        },
        "check_workspace_configuration_changes": {
          "doc": "Check if workspace configuration has changed.",
          "calls": [
            "get_workspace_config_cached"
          ],
          "signature": "(project_root: Path) -> Tuple[bool, List[str]]",
          "called_by": [
            "handle_workspace_aware_reindex",
            "handle_workspace_aware_reindex"
          ]
        },
        "run_workspace_reindex": {
          "doc": "Run reindex for a specific workspace.",
          "calls": [
            "get_workspace_config_cached"
          ],
          "signature": "(workspace_name: str, project_root: Path) -> bool",
          "called_by": [
            "run_reindex",
            "run_reindex"
          ]
        },
        "run_reindex": {
          "doc": "Run reindexing with workspace awareness.",
          "calls": [
            "get_workspace_config_cached",
            "run_reindex",
            "run_single_repo_reindex",
            "run_workspace_reindex",
            "update_root_index_after_workspace_reindex"
          ],
          "signature": "(project_root: Path, selective_workspaces: Optional[List[str]] = None) -> bool",
          "called_by": [
            "run_reindex",
            "handle_workspace_aware_reindex",
            "run_reindex",
            "handle_workspace_aware_reindex"
          ]
        },
        "run_single_repo_reindex": {
          "doc": "Run traditional single-repo reindex.",
          "signature": "(project_root: Path) -> bool",
          "called_by": [
            "run_reindex",
            "handle_single_repo_reindex",
            "run_reindex",
            "handle_single_repo_reindex"
          ]
        },
        "update_root_index_after_workspace_reindex": {
          "doc": "Update root index after workspace reindexing.",
          "calls": [
            "get_workspace_config_cached"
          ],
          "signature": "(project_root: Path, reindexed_workspaces: List[str]) -> None",
          "called_by": [
            "run_reindex",
            "run_reindex"
          ]
        },
        "main": {
          "doc": "Main hook entry point with workspace awareness.",
          "calls": [
            "get_workspace_config_cached",
            "handle_single_repo_reindex",
            "handle_workspace_aware_reindex"
          ],
          "signature": "()"
        },
        "handle_single_repo_reindex": {
          "doc": "Handle single-repo reindexing logic.",
          "calls": [
            "check_index_features",
            "check_index_staleness",
            "check_missing_documentation",
            "check_structural_changes",
            "count_hook_updates",
            "run_single_repo_reindex"
          ],
          "signature": "(root_index_path: Path, project_root: Path) -> None",
          "called_by": [
            "main",
            "main"
          ]
        },
        "handle_workspace_aware_reindex": {
          "doc": "Handle workspace-aware reindexing logic.",
          "calls": [
            "check_workspace_configuration_changes",
            "check_workspace_staleness",
            "run_reindex"
          ],
          "signature": "(project_root: Path, workspace_config: Dict) -> None",
          "called_by": [
            "main",
            "main"
          ]
        }
      },
      "classes": {},
      "constants": {
        "CACHE_TTL": "number"
      },
      "call_graph": {}
    },
    "scripts/detect_external_changes.py": {
      "language": "python",
      "parsed": true,
      "imports": [
        "os",
        "json",
        "subprocess",
        "pathlib",
        "datetime",
        "sys"
      ],
      "functions": {
        "get_file_mtime": {
          "doc": "Get file modification time as timestamp.",
          "signature": "(file_path)",
          "called_by": [
            "detect_external_changes"
          ]
        },
        "detect_external_changes": {
          "calls": [
            "get_file_mtime"
          ],
          "signature": "(index_path, project_root)"
        },
        "check_git_changes": "(project_root)"
      },
      "classes": {},
      "call_graph": {}
    },
    "scripts/monorepo_detector.py": {
      "language": "python",
      "parsed": true,
      "imports": [
        "json",
        "re",
        "yaml",
        "pathlib",
        "typing",
        "sys"
      ],
      "functions": {
        "detect_monorepo": {
          "calls": [
            "detect",
            "to_dict"
          ],
          "signature": "(root_path: Union[str, Path]) -> Dict"
        }
      },
      "classes": {
        "DetectionResult": {
          "methods": {
            "__init__": "(self, monorepo: bool = False, tool: Optional[str] = None, workspace_registry: Optional[Dict[str, str]] = None, config_path: Optional[str] = None, detection_method: str = \"none\", errors: Optional[List[str]] = None)",
            "to_dict": {
              "doc": "Convert to dictionary for JSON serialization.",
              "signature": "(self) -> Dict",
              "called_by": [
                "WorkspaceRegistry.to_dict",
                "PerformanceMonitor._log_performance_data",
                "detect_monorepo"
              ]
            }
          },
          "doc": "Standardized detection result structure."
        },
        "BaseDetector": {
          "methods": {
            "__init__": "(self, root_path: Path)",
            "detect": {
              "doc": "Detect workspaces. Override in subclasses.",
              "signature": "(self) -> Optional[DetectionResult]",
              "called_by": [
                "MonorepoDetector.detect",
                "detect_monorepo"
              ]
            },
            "_safe_read_json": {
              "doc": "Safely read and parse JSON file.",
              "signature": "(self, file_path: Path) -> Optional[Dict]",
              "called_by": [
                "LernaDetector.detect",
                "RushDetector.detect",
                "ManualConfigDetector.detect",
                "NxDetector.detect",
                "YarnWorkspacesDetector.detect"
              ]
            },
            "_safe_read_yaml": {
              "doc": "Safely read and parse YAML file.",
              "signature": "(self, file_path: Path) -> Optional[Dict]",
              "called_by": [
                "PnpmWorkspacesDetector.detect"
              ]
            },
            "_resolve_workspace_paths": {
              "doc": "Resolve workspace patterns to actual directories.",
              "signature": "(self, patterns: List[str]) -> Dict[str, str]",
              "called_by": [
                "LernaDetector.detect",
                "ManualConfigDetector.detect",
                "NxDetector.detect",
                "PnpmWorkspacesDetector.detect",
                "YarnWorkspacesDetector.detect"
              ]
            }
          },
          "doc": "Base class for tool-specific detectors."
        },
        "NxDetector": {
          "methods": {
            "detect": {
              "calls": [
                "_resolve_workspace_paths",
                "_safe_read_json"
              ],
              "signature": "(self) -> Optional[DetectionResult]",
              "called_by": [
                "MonorepoDetector.detect",
                "detect_monorepo"
              ]
            }
          },
          "inherits": [
            "BaseDetector"
          ],
          "doc": "Detect Nx monorepo configuration."
        },
        "LernaDetector": {
          "methods": {
            "detect": {
              "calls": [
                "_resolve_workspace_paths",
                "_safe_read_json"
              ],
              "signature": "(self) -> Optional[DetectionResult]",
              "called_by": [
                "MonorepoDetector.detect",
                "detect_monorepo"
              ]
            }
          },
          "inherits": [
            "BaseDetector"
          ],
          "doc": "Detect Lerna monorepo configuration."
        },
        "YarnWorkspacesDetector": {
          "methods": {
            "detect": {
              "calls": [
                "_resolve_workspace_paths",
                "_safe_read_json"
              ],
              "signature": "(self) -> Optional[DetectionResult]",
              "called_by": [
                "MonorepoDetector.detect",
                "detect_monorepo"
              ]
            }
          },
          "inherits": [
            "BaseDetector"
          ],
          "doc": "Detect Yarn Workspaces configuration."
        },
        "PnpmWorkspacesDetector": {
          "methods": {
            "detect": {
              "calls": [
                "_resolve_workspace_paths",
                "_safe_read_yaml"
              ],
              "signature": "(self) -> Optional[DetectionResult]",
              "called_by": [
                "MonorepoDetector.detect",
                "detect_monorepo"
              ]
            }
          },
          "inherits": [
            "BaseDetector"
          ],
          "doc": "Detect PNPM Workspaces configuration."
        },
        "RushDetector": {
          "methods": {
            "detect": {
              "calls": [
                "_safe_read_json"
              ],
              "signature": "(self) -> Optional[DetectionResult]",
              "called_by": [
                "MonorepoDetector.detect",
                "detect_monorepo"
              ]
            }
          },
          "inherits": [
            "BaseDetector"
          ],
          "doc": "Detect Rush monorepo configuration."
        },
        "ManualConfigDetector": {
          "methods": {
            "detect": {
              "calls": [
                "_resolve_workspace_paths",
                "_safe_read_json"
              ],
              "signature": "(self) -> Optional[DetectionResult]",
              "called_by": [
                "MonorepoDetector.detect",
                "detect_monorepo"
              ]
            }
          },
          "inherits": [
            "BaseDetector"
          ],
          "doc": "Detect manual configuration override."
        },
        "MonorepoDetector": {
          "methods": {
            "__init__": "(self, root_path: Union[str, Path])",
            "detect": {
              "doc": "Run detection with all available detectors.",
              "calls": [
                "_heuristic_detection",
                "detect"
              ],
              "signature": "(self) -> DetectionResult",
              "called_by": [
                "MonorepoDetector.detect",
                "detect_monorepo"
              ]
            },
            "_heuristic_detection": {
              "doc": "Fallback heuristic analysis for edge cases.",
              "signature": "(self) -> DetectionResult",
              "called_by": [
                "MonorepoDetector.detect"
              ]
            }
          },
          "doc": "Main monorepo detection orchestrator."
        }
      },
      "call_graph": {}
    },
    "scripts/parallel_workspace_processor.py": {
      "language": "python",
      "parsed": true,
      "imports": [
        "json",
        "time",
        "threading",
        "concurrent.futures",
        "dataclasses",
        "datetime",
        "pathlib",
        "typing",
        "queue",
        "traceback",
        "os",
        "psutil",
        "workspace_config",
        "workspace_indexer",
        "cross_workspace_analyzer",
        "performance_monitor",
        "sys",
        "argparse"
      ],
      "functions": {
        "process_workspaces_parallel": {
          "calls": [
            "process_workspaces_parallel"
          ],
          "signature": "(root_path: Union[str, Path], workspace_names: Optional[List[str]] = None, max_workers: Optional[int] = None, show_progress: bool = True) -> Dict[str, Dict]",
          "called_by": [
            "process_workspaces_parallel",
            "ParallelWorkspaceProcessor.process_workspaces_with_analysis"
          ]
        },
        "process_workspaces_with_analysis": {
          "calls": [
            "process_workspaces_with_analysis"
          ],
          "signature": "(root_path: Union[str, Path], workspace_names: Optional[List[str]] = None, max_workers: Optional[int] = None, show_progress: bool = True) -> Dict[str, Any]",
          "called_by": [
            "process_workspaces_with_analysis"
          ]
        }
      },
      "classes": {
        "ProcessingProgress": {
          "methods": {
            "percentage_complete": {
              "decorators": [
                "property"
              ],
              "doc": "Calculate completion percentage.",
              "signature": "(self) -> float"
            },
            "elapsed_time": {
              "decorators": [
                "property"
              ],
              "doc": "Calculate elapsed time in seconds.",
              "signature": "(self) -> float"
            },
            "estimated_remaining": {
              "decorators": [
                "property"
              ],
              "doc": "Estimate remaining time in seconds.",
              "signature": "(self) -> float"
            }
          },
          "decorators": [
            "dataclass"
          ],
          "doc": "Track progress of workspace processing operations.",
          "properties": [
            "total_workspaces",
            "completed",
            "failed",
            "in_progress",
            "completed_workspaces",
            "failed_workspaces",
            "start_time"
          ]
        },
        "WorkspaceTask": {
          "methods": {},
          "decorators": [
            "dataclass"
          ],
          "doc": "Represents a workspace processing task.",
          "properties": [
            "workspace_name",
            "priority",
            "dependencies",
            "estimated_duration",
            "task_id"
          ]
        },
        "SharedResourceManager": {
          "methods": {
            "__init__": "(self)",
            "get_file_lock": {
              "doc": "Get a thread-safe lock for a specific file.",
              "signature": "(self, file_path: str) -> threading.Lock"
            },
            "cache_workspace_result": {
              "doc": "Thread-safe caching of workspace results.",
              "signature": "(self, workspace_name: str, result: Dict)",
              "called_by": [
                "ParallelWorkspaceProcessor._index_single_workspace"
              ]
            },
            "get_cached_workspace_result": {
              "doc": "Get cached workspace result if available.",
              "signature": "(self, workspace_name: str) -> Optional[Dict]",
              "called_by": [
                "ParallelWorkspaceProcessor._index_single_workspace"
              ]
            },
            "update_cross_workspace_results": {
              "doc": "Thread-safe update of cross-workspace analysis results.",
              "signature": "(self, results: Dict)",
              "called_by": [
                "ParallelWorkspaceProcessor.analyze_cross_workspace_dependencies"
              ]
            },
            "get_cross_workspace_results": {
              "doc": "Get current cross-workspace analysis results.",
              "signature": "(self) -> Dict"
            }
          },
          "doc": "Thread-safe manager for shared resources and caches."
        },
        "ParallelWorkspaceProcessor": {
          "methods": {
            "__init__": "(self, registry: WorkspaceRegistry, max_workers: Optional[int] = None, memory_limit_mb: int = 100, enable_throttling: bool = True)",
            "add_progress_callback": {
              "doc": "Add a callback function to receive progress updates.",
              "signature": "(self, callback: Callable[[ProcessingProgress], None])"
            },
            "_notify_progress": {
              "doc": "Notify all progress callbacks of updates.",
              "signature": "(self, progress: ProcessingProgress)",
              "called_by": [
                "ParallelWorkspaceProcessor.process_workspaces_parallel"
              ]
            },
            "_check_memory_usage": {
              "doc": "Check if memory usage is within limits.",
              "signature": "(self) -> bool",
              "called_by": [
                "ParallelWorkspaceProcessor._wait_for_memory"
              ]
            },
            "_wait_for_memory": {
              "doc": "Wait for memory usage to drop below limits.",
              "calls": [
                "_check_memory_usage"
              ],
              "signature": "(self, timeout: float = 5.0) -> bool",
              "called_by": [
                "ParallelWorkspaceProcessor._index_single_workspace"
              ]
            },
            "_create_workspace_indexer": {
              "doc": "Create a new WorkspaceIndexer for the current thread.",
              "signature": "(self) -> WorkspaceIndexer",
              "called_by": [
                "ParallelWorkspaceProcessor._index_single_workspace"
              ]
            },
            "_create_cross_workspace_analyzer": {
              "doc": "Create a new CrossWorkspaceAnalyzer for the current thread.",
              "signature": "(self) -> CrossWorkspaceAnalyzer",
              "called_by": [
                "ParallelWorkspaceProcessor.analyze_cross_workspace_dependencies"
              ]
            },
            "_index_single_workspace": {
              "decorators": [
                "performance_timing"
              ],
              "calls": [
                "_create_workspace_indexer",
                "_wait_for_memory",
                "cache_workspace_result",
                "get_cached_workspace_result"
              ],
              "signature": "(self, workspace_name: str, progress: ProcessingProgress) -> Dict"
            },
            "_sort_workspaces_by_dependencies": {
              "signature": "(self, workspace_names: List[str]) -> List[WorkspaceTask]",
              "called_by": [
                "ParallelWorkspaceProcessor.process_workspaces_parallel"
              ]
            },
            "process_workspaces_parallel": {
              "calls": [
                "_notify_progress",
                "_sort_workspaces_by_dependencies"
              ],
              "signature": "(self, workspace_names: Optional[List[str]] = None, show_progress: bool = True) -> Dict[str, Dict]",
              "called_by": [
                "ParallelWorkspaceProcessor.process_workspaces_with_analysis",
                "process_workspaces_parallel"
              ]
            },
            "analyze_cross_workspace_dependencies": {
              "decorators": [
                "performance_timing"
              ],
              "calls": [
                "_create_cross_workspace_analyzer",
                "update_cross_workspace_results"
              ],
              "signature": "(self, workspace_results: Dict[str, Dict]) -> Dict",
              "called_by": [
                "ParallelWorkspaceProcessor.process_workspaces_with_analysis"
              ]
            },
            "process_workspaces_with_analysis": {
              "calls": [
                "analyze_cross_workspace_dependencies",
                "process_workspaces_parallel"
              ],
              "signature": "(self, workspace_names: Optional[List[str]] = None, include_cross_analysis: bool = True, show_progress: bool = True) -> Dict[str, Any]",
              "called_by": [
                "process_workspaces_with_analysis"
              ]
            },
            "shutdown": {
              "doc": "Request graceful shutdown of the processor.",
              "signature": "(self)"
            }
          },
          "properties": [
            "registry",
            "max_workers",
            "memory_limit_mb",
            "enable_throttling",
            "workspace_name",
            "progress",
            "workspace_names",
            "workspace_names",
            "show_progress",
            "workspace_results",
            "workspace_names",
            "include_cross_analysis",
            "show_progress"
          ]
        }
      },
      "call_graph": {}
    },
    "scripts/workspace_config.py": {
      "language": "python",
      "parsed": true,
      "purpose": "Configuration",
      "imports": [
        "json",
        "re",
        "pathlib",
        "typing",
        "datetime",
        "monorepo_detector",
        "sys"
      ],
      "functions": {
        "load_workspace_config": {
          "calls": [
            "load_configuration"
          ],
          "signature": "(root_path: Union[str, Path]) -> WorkspaceRegistry"
        }
      },
      "classes": {
        "WorkspaceConfig": {
          "methods": {
            "__init__": {
              "calls": [
                "_apply_performance_profile",
                "_detect_package_manager"
              ],
              "signature": "(self, name: str, path: str, root_path: Path, ignore_patterns: Optional[List[str]] = None, custom_settings: Optional[Dict] = None, performance_profile: str = \"balanced\", include: bool = True, indexing_depth: Optional[int] = None, max_files: Optional[int] = None)"
            },
            "_detect_package_manager": {
              "doc": "Detect the package manager used in this workspace.",
              "signature": "(self) -> str",
              "called_by": [
                "WorkspaceConfig.__init__"
              ]
            },
            "_apply_performance_profile": {
              "doc": "Apply performance profile defaults if not explicitly set.",
              "signature": "(self)",
              "called_by": [
                "WorkspaceConfigManager._apply_manual_overrides",
                "WorkspaceConfig.__init__"
              ]
            },
            "get_performance_profile": {
              "doc": "Get the current performance profile settings.",
              "signature": "(self) -> Dict"
            },
            "should_skip_dependency_analysis": {
              "doc": "Check if dependency analysis should be skipped.",
              "signature": "(self) -> bool"
            },
            "should_skip_cross_workspace_analysis": {
              "doc": "Check if cross-workspace analysis should be skipped.",
              "signature": "(self) -> bool"
            },
            "get_max_files": {
              "doc": "Get the maximum number of files to index.",
              "signature": "(self) -> Optional[int]"
            },
            "get_indexing_depth": {
              "doc": "Get the maximum indexing depth.",
              "signature": "(self) -> Optional[int]"
            },
            "get_file_size_limit_mb": {
              "doc": "Get the file size limit in MB.",
              "signature": "(self) -> float",
              "called_by": [
                "WorkspaceConfigManager.create_interactive_config"
              ]
            },
            "get_ignore_patterns": {
              "doc": "Get all ignore patterns for this workspace.",
              "signature": "(self) -> Set[str]",
              "called_by": [
                "WorkspaceConfig.to_dict"
              ]
            },
            "to_dict": {
              "doc": "Convert to dictionary for serialization.",
              "calls": [
                "get_ignore_patterns"
              ],
              "signature": "(self) -> Dict",
              "called_by": [
                "WorkspaceRegistry.to_dict",
                "PerformanceMonitor._log_performance_data",
                "detect_monorepo"
              ]
            }
          },
          "doc": "Represents configuration for a single workspace."
        },
        "WorkspaceRegistry": {
          "methods": {
            "__init__": {
              "calls": [
                "_load_workspaces"
              ],
              "signature": "(self, root_path: Path, detection_result: DetectionResult)"
            },
            "_load_workspaces": {
              "doc": "Load workspace configurations from detection result.",
              "signature": "(self)",
              "called_by": [
                "WorkspaceRegistry.__init__"
              ]
            },
            "get_workspace": {
              "doc": "Get workspace configuration by name.",
              "signature": "(self, name: str) -> Optional[WorkspaceConfig]",
              "called_by": [
                "WorkspaceConfigManager._apply_manual_overrides",
                "WorkspaceConfigManager.validate_config_file"
              ]
            },
            "get_workspace_by_path": {
              "doc": "Determine which workspace a file belongs to.",
              "signature": "(self, file_path: Union[str, Path]) -> Optional[WorkspaceConfig]",
              "called_by": [
                "WorkspaceConfigManager.get_workspace_for_file"
              ]
            },
            "get_all_workspaces": {
              "doc": "Get all workspace configurations.",
              "signature": "(self) -> List[WorkspaceConfig]",
              "called_by": [
                "WorkspaceConfigManager.create_interactive_config",
                "WorkspaceConfigManager.get_workspace_by_performance_profile"
              ]
            },
            "get_workspace_names": {
              "doc": "Get all workspace names.",
              "signature": "(self) -> List[str]",
              "called_by": [
                "WorkspaceConfigManager.get_monorepo_info"
              ]
            },
            "set_dependencies": {
              "doc": "Set dependencies for a workspace.",
              "signature": "(self, workspace_name: str, dependencies: List[str])",
              "called_by": [
                "WorkspaceConfigManager._apply_manual_overrides"
              ]
            },
            "get_dependencies": {
              "doc": "Get dependencies for a workspace.",
              "signature": "(self, workspace_name: str) -> List[str]",
              "called_by": [
                "WorkspaceRegistry.validate",
                "WorkspaceRegistry.check_circular"
              ]
            },
            "get_dependents": {
              "doc": "Get workspaces that depend on this one.",
              "signature": "(self, workspace_name: str) -> List[str]"
            },
            "validate": {
              "doc": "Validate the workspace configuration.",
              "calls": [
                "check_circular",
                "get_dependencies"
              ],
              "signature": "(self) -> List[str]",
              "called_by": [
                "WorkspaceConfigManager.validate_configuration"
              ]
            },
            "check_circular": {
              "calls": [
                "check_circular",
                "get_dependencies"
              ],
              "signature": "(workspace_name: str, visited: Set[str], path: List[str]) -> bool",
              "called_by": [
                "WorkspaceRegistry.validate",
                "WorkspaceRegistry.check_circular"
              ]
            },
            "to_dict": {
              "doc": "Convert to dictionary for serialization.",
              "calls": [
                "to_dict"
              ],
              "signature": "(self) -> Dict",
              "called_by": [
                "WorkspaceRegistry.to_dict",
                "PerformanceMonitor._log_performance_data",
                "detect_monorepo"
              ]
            }
          },
          "doc": "Registry of all workspaces in the monorepo."
        },
        "WorkspaceConfigManager": {
          "methods": {
            "__init__": "(self, root_path: Union[str, Path])",
            "load_configuration": {
              "calls": [
                "_apply_manual_overrides"
              ],
              "signature": "(self, force_refresh: bool = False) -> WorkspaceRegistry",
              "called_by": [
                "load_workspace_config",
                "WorkspaceConfigManager.create_interactive_config",
                "WorkspaceConfigManager.validate_config_file",
                "WorkspaceConfigManager.is_monorepo",
                "WorkspaceConfigManager.get_workspace_by_performance_profile",
                "WorkspaceConfigManager.get_workspace_for_file",
                "WorkspaceConfigManager.validate_configuration",
                "WorkspaceConfigManager.get_monorepo_info"
              ]
            },
            "_apply_manual_overrides": {
              "doc": "Apply manual configuration overrides.",
              "calls": [
                "_apply_performance_profile",
                "get_workspace",
                "set_dependencies"
              ],
              "signature": "(self, registry: WorkspaceRegistry) -> WorkspaceRegistry",
              "called_by": [
                "WorkspaceConfigManager.load_configuration"
              ]
            },
            "get_workspace_for_file": {
              "doc": "Get the workspace that contains the given file.",
              "calls": [
                "get_workspace_by_path",
                "load_configuration"
              ],
              "signature": "(self, file_path: Union[str, Path]) -> Optional[WorkspaceConfig]",
              "called_by": [
                "detect_file_move",
                "handle_file_update"
              ]
            },
            "validate_configuration": {
              "doc": "Validate the current workspace configuration.",
              "calls": [
                "load_configuration",
                "validate"
              ],
              "signature": "(self) -> List[str]"
            },
            "clear_cache": {
              "doc": "Clear the configuration cache.",
              "signature": "(self)"
            },
            "is_monorepo": {
              "doc": "Check if the current project is a monorepo.",
              "calls": [
                "load_configuration"
              ],
              "signature": "(self) -> bool"
            },
            "get_monorepo_info": {
              "doc": "Get comprehensive monorepo information.",
              "calls": [
                "get_workspace_names",
                "load_configuration"
              ],
              "signature": "(self) -> Dict"
            },
            "get_workspace_by_performance_profile": {
              "doc": "Get all workspaces using a specific performance profile.",
              "calls": [
                "get_all_workspaces",
                "load_configuration"
              ],
              "signature": "(self, profile: str) -> List[WorkspaceConfig]"
            },
            "validate_performance_profile": {
              "doc": "Validate that a performance profile is valid.",
              "signature": "(self, profile: str) -> bool",
              "called_by": [
                "WorkspaceConfigManager.validate_config_file"
              ]
            },
            "get_available_performance_profiles": {
              "doc": "Get all available performance profiles with their descriptions.",
              "signature": "(self) -> Dict[str, Dict]"
            },
            "create_interactive_config": {
              "doc": "Create an interactive configuration template.",
              "calls": [
                "get_all_workspaces",
                "get_file_size_limit_mb",
                "load_configuration"
              ],
              "signature": "(self) -> Dict"
            },
            "validate_config_file": {
              "doc": "Validate configuration file format and values.",
              "calls": [
                "get_workspace",
                "load_configuration",
                "validate_performance_profile"
              ],
              "signature": "(self, config_path: Optional[Path] = None) -> List[str]"
            },
            "get_global_settings": {
              "doc": "Get global configuration settings.",
              "signature": "(self) -> Dict"
            }
          },
          "doc": "Main workspace configuration manager with caching and validation.",
          "properties": [
            "force_refresh"
          ]
        }
      },
      "constants": {
        "PERFORMANCE_PROFILES": "collection"
      },
      "call_graph": {}
    },
    "scripts/monorepo_commands.py": {
      "language": "python",
      "parsed": true,
      "imports": [
        "json",
        "sys",
        "time",
        "argparse",
        "pathlib",
        "typing",
        "datetime",
        "workspace_config",
        "parallel_workspace_processor",
        "performance_monitor",
        "project_index"
      ],
      "functions": {
        "main": {
          "doc": "CLI entry point for monorepo commands.",
          "calls": [
            "dependencies",
            "index_monorepo",
            "index_workspace",
            "interactive_config",
            "migrate",
            "stats",
            "status"
          ],
          "signature": "()"
        }
      },
      "classes": {
        "MonorepoCommands": {
          "methods": {
            "__init__": "(self, root_path: str = \".\")",
            "index_workspace": {
              "signature": "(self, workspace_name: Optional[str] = None, **kwargs) -> Dict",
              "called_by": [
                "WorkspaceIndexer.index_all_workspaces",
                "index_workspace",
                "main"
              ]
            },
            "index_monorepo": {
              "signature": "(self, force: bool = False, selective: Optional[List[str]] = None, **kwargs) -> Dict",
              "called_by": [
                "MonorepoCommands.migrate",
                "main"
              ]
            },
            "interactive_config": {
              "signature": "(self, **kwargs) -> Dict",
              "called_by": [
                "main"
              ]
            },
            "status": {
              "signature": "(self, **kwargs) -> Dict",
              "called_by": [
                "main"
              ]
            },
            "stats": {
              "signature": "(self, **kwargs) -> Dict",
              "called_by": [
                "main"
              ]
            },
            "dependencies": {
              "signature": "(self, format: str = \"text\", **kwargs) -> Dict",
              "called_by": [
                "main"
              ]
            },
            "migrate": {
              "calls": [
                "index_monorepo"
              ],
              "signature": "(self, **kwargs) -> Dict",
              "called_by": [
                "main"
              ]
            }
          },
          "doc": "Main command handler for monorepo operations.",
          "properties": [
            "workspace_name",
            "force",
            "selective",
            "format",
            "else"
          ]
        }
      },
      "call_graph": {}
    },
    "scripts/project-index-helper.sh": {
      "language": "shell",
      "parsed": false,
      "purpose": "Utility functions"
    },
    "scripts/performance_monitor.py": {
      "language": "python",
      "parsed": true,
      "imports": [
        "json",
        "time",
        "pathlib",
        "datetime",
        "typing",
        "dataclasses",
        "collections",
        "threading",
        "os",
        "psutil",
        "sys"
      ],
      "functions": {
        "get_performance_monitor": {
          "doc": "Get the global performance monitor instance.",
          "signature": "() -> PerformanceMonitor"
        },
        "performance_timing": {
          "doc": "Decorator for timing hook operations.",
          "calls": [
            "decorator",
            "end_hook_timing",
            "record_error",
            "start_hook_timing",
            "wrapper"
          ],
          "signature": "(hook_name: str, operation: str = \"unknown\")"
        }
      },
      "classes": {
        "HookTiming": {
          "methods": {
            "to_dict": {
              "signature": "(self) -> Dict",
              "called_by": [
                "WorkspaceRegistry.to_dict",
                "PerformanceMonitor._log_performance_data",
                "detect_monorepo"
              ]
            }
          },
          "decorators": [
            "dataclass"
          ],
          "doc": "Track timing data for hook executions.",
          "properties": [
            "hook_name",
            "start_time",
            "end_time",
            "duration",
            "workspace",
            "file_path",
            "operation",
            "success",
            "error_message"
          ]
        },
        "CacheStats": {
          "methods": {
            "to_dict": {
              "signature": "(self) -> Dict",
              "called_by": [
                "WorkspaceRegistry.to_dict",
                "PerformanceMonitor._log_performance_data",
                "detect_monorepo"
              ]
            }
          },
          "decorators": [
            "dataclass"
          ],
          "doc": "Track cache performance statistics.",
          "properties": [
            "cache_name",
            "hits",
            "misses",
            "evictions",
            "size",
            "max_size",
            "hit_rate"
          ]
        },
        "ResourceUsage": {
          "methods": {
            "to_dict": {
              "signature": "(self) -> Dict",
              "called_by": [
                "WorkspaceRegistry.to_dict",
                "PerformanceMonitor._log_performance_data",
                "detect_monorepo"
              ]
            }
          },
          "decorators": [
            "dataclass"
          ],
          "doc": "Track system resource usage during operations.",
          "properties": [
            "timestamp",
            "cpu_percent",
            "memory_mb",
            "disk_io_read",
            "disk_io_write",
            "process_id"
          ]
        },
        "PerformanceMonitor": {
          "methods": {
            "__init__": "(self)",
            "set_performance_log_path": {
              "doc": "Set the path for performance logging.",
              "signature": "(self, project_root: Path)"
            },
            "start_hook_timing": {
              "doc": "Start timing a hook operation.",
              "calls": [
                "_record_resource_usage"
              ],
              "signature": "(self, hook_name: str, operation: str, workspace: Optional[str] = None, file_path: Optional[str] = None) -> str",
              "called_by": [
                "performance_timing"
              ]
            },
            "end_hook_timing": {
              "doc": "End timing a hook operation and record performance data.",
              "calls": [
                "_check_performance_thresholds",
                "_log_performance_data",
                "_record_resource_usage"
              ],
              "signature": "(self, timing_id: str, success: bool = True, error_message: Optional[str] = None)",
              "called_by": [
                "performance_timing"
              ]
            },
            "record_cache_hit": {
              "doc": "Record a cache hit.",
              "signature": "(self, cache_name: str)"
            },
            "record_cache_miss": {
              "doc": "Record a cache miss.",
              "signature": "(self, cache_name: str)"
            },
            "record_cache_eviction": {
              "doc": "Record a cache eviction.",
              "signature": "(self, cache_name: str)"
            },
            "record_error": {
              "doc": "Record an error occurrence.",
              "signature": "(self, error_type: str)",
              "called_by": [
                "performance_timing"
              ]
            },
            "get_performance_summary": {
              "doc": "Get performance summary for the last N hours.",
              "calls": [
                "_get_cache_statistics",
                "_get_hook_breakdown",
                "_get_workspace_breakdown",
                "_percentile"
              ],
              "signature": "(self, hours: int = 24) -> Dict"
            },
            "optimize_caches": {
              "doc": "Analyze and optimize cache configurations.",
              "signature": "(self, project_root: Path) -> Dict"
            },
            "_record_resource_usage": {
              "doc": "Record current resource usage.",
              "signature": "(self)",
              "called_by": [
                "PerformanceMonitor.start_hook_timing",
                "PerformanceMonitor.end_hook_timing"
              ]
            },
            "_check_performance_thresholds": {
              "doc": "Check if performance thresholds are violated.",
              "signature": "(self, timing: HookTiming)",
              "called_by": [
                "PerformanceMonitor.end_hook_timing"
              ]
            },
            "_log_performance_data": {
              "doc": "Log performance data to file.",
              "calls": [
                "to_dict"
              ],
              "signature": "(self, timing: HookTiming)",
              "called_by": [
                "PerformanceMonitor.end_hook_timing"
              ]
            },
            "_percentile": {
              "doc": "Calculate percentile of values.",
              "signature": "(self, values: List[float], percentile: float) -> float",
              "called_by": [
                "PerformanceMonitor._get_hook_breakdown",
                "PerformanceMonitor.get_performance_summary"
              ]
            },
            "_get_hook_breakdown": {
              "doc": "Get performance breakdown by hook type.",
              "calls": [
                "_percentile"
              ],
              "signature": "(self, timings: List[HookTiming]) -> Dict",
              "called_by": [
                "PerformanceMonitor.get_performance_summary"
              ]
            },
            "_get_workspace_breakdown": {
              "doc": "Get performance breakdown by workspace.",
              "signature": "(self, timings: List[HookTiming]) -> Dict",
              "called_by": [
                "PerformanceMonitor.get_performance_summary"
              ]
            },
            "_get_cache_statistics": {
              "doc": "Get cache performance statistics.",
              "signature": "(self) -> Dict",
              "called_by": [
                "PerformanceMonitor.get_performance_summary"
              ]
            }
          },
          "doc": "Central performance monitoring and optimization system."
        }
      },
      "call_graph": {}
    },
    "scripts/update_index.py": {
      "language": "python",
      "parsed": true,
      "imports": [
        "json",
        "sys",
        "os",
        "pathlib",
        "datetime",
        "typing",
        "time",
        "performance_monitor",
        "index_utils",
        "workspace_config",
        "workspace_indexer",
        "cross_workspace_analyzer"
      ],
      "functions": {
        "find_project_modules": {
          "doc": "Find project modules (index_utils, workspace_config, etc.) in project or system location.",
          "signature": "()"
        },
        "get_workspace_config_cached": {
          "doc": "Get workspace configuration with caching.",
          "signature": "(project_root: Path) -> Optional[Dict]",
          "called_by": [
            "check_workspace_staleness",
            "check_workspace_configuration_changes",
            "run_workspace_reindex",
            "run_reindex",
            "update_root_index_after_workspace_reindex",
            "main",
            "get_workspace_for_file",
            "get_workspace_index_path",
            "get_dependent_workspaces",
            "update_root_index_workspace_registry",
            "handle_file_update",
            "check_workspace_staleness",
            "check_workspace_configuration_changes",
            "run_workspace_reindex",
            "run_reindex",
            "update_root_index_after_workspace_reindex",
            "main",
            "get_workspace_for_file",
            "get_workspace_index_path",
            "get_dependent_workspaces",
            "handle_cross_workspace_dependencies",
            "update_root_index_workspace_registry",
            "detect_file_move",
            "handle_file_update"
          ]
        },
        "get_workspace_for_file": {
          "doc": "Determine which workspace a file belongs to.",
          "calls": [
            "get_workspace_config_cached"
          ],
          "signature": "(file_path: Path, project_root: Path) -> Optional[str]",
          "called_by": [
            "handle_file_update",
            "detect_file_move",
            "handle_file_update"
          ]
        },
        "get_workspace_index_path": {
          "doc": "Get the path to a workspace's index file.",
          "calls": [
            "get_workspace_config_cached"
          ],
          "signature": "(workspace_name: str, project_root: Path) -> Optional[Path]",
          "called_by": [
            "update_workspace_index",
            "handle_cross_workspace_dependencies",
            "update_root_index_workspace_registry",
            "update_workspace_index",
            "handle_basic_cross_workspace_dependencies",
            "update_workspace_dependencies",
            "update_root_index_workspace_registry",
            "detect_file_move",
            "handle_cross_workspace_file_move"
          ]
        },
        "get_dependent_workspaces": {
          "doc": "Get list of workspaces that depend on the given workspace.",
          "calls": [
            "get_workspace_config_cached"
          ],
          "signature": "(workspace_name: str, project_root: Path) -> List[str]",
          "called_by": [
            "handle_cross_workspace_dependencies",
            "handle_basic_cross_workspace_dependencies"
          ]
        },
        "update_workspace_index": {
          "doc": "Update a specific workspace index.",
          "calls": [
            "get_workspace_index_path",
            "update_file_in_index"
          ],
          "signature": "(workspace_name: str, file_path: Path, project_root: Path) -> bool",
          "called_by": [
            "handle_file_update",
            "handle_file_update"
          ]
        },
        "handle_cross_workspace_dependencies": {
          "doc": "Handle cascade updates for dependent workspaces with enhanced analysis.",
          "calls": [
            "get_workspace_config_cached",
            "handle_basic_cross_workspace_dependencies",
            "update_root_index_dependencies",
            "update_workspace_dependencies"
          ],
          "signature": "(workspace_name: str, project_root: Path) -> None",
          "called_by": [
            "handle_file_update",
            "handle_cross_workspace_file_move",
            "handle_file_update"
          ]
        },
        "handle_basic_cross_workspace_dependencies": {
          "doc": "Basic cross-workspace dependency handling (fallback).",
          "calls": [
            "get_dependent_workspaces",
            "get_workspace_index_path"
          ],
          "signature": "(workspace_name: str, project_root: Path) -> None",
          "called_by": [
            "handle_cross_workspace_dependencies"
          ]
        },
        "update_root_index_dependencies": {
          "doc": "Update the root index with enhanced cross-workspace dependency information.",
          "signature": "(project_root: Path, cross_workspace_results: Dict) -> None",
          "called_by": [
            "handle_cross_workspace_dependencies"
          ]
        },
        "update_workspace_dependencies": {
          "doc": "Update a workspace index with enhanced dependency information.",
          "calls": [
            "get_workspace_index_path"
          ],
          "signature": "(workspace_name: str, project_root: Path, workspace_deps: Dict) -> None",
          "called_by": [
            "handle_cross_workspace_dependencies"
          ]
        },
        "update_root_index_workspace_registry": {
          "doc": "Update the root index workspace registry when workspace relationships change.",
          "calls": [
            "get_workspace_config_cached",
            "get_workspace_index_path"
          ],
          "signature": "(project_root: Path) -> None",
          "called_by": [
            "handle_file_update",
            "handle_cross_workspace_file_move",
            "handle_file_update"
          ]
        },
        "update_file_in_index": {
          "doc": "Update a single file's entry in the enhanced index.",
          "signature": "(index_path: str, file_path: str, project_root: str) -> bool",
          "called_by": [
            "update_workspace_index",
            "handle_file_update",
            "update_workspace_index",
            "handle_file_update"
          ]
        },
        "detect_file_move": {
          "doc": "Detect if this is a cross-workspace file move by checking for stale entries.",
          "calls": [
            "get_workspace_config_cached",
            "get_workspace_for_file",
            "get_workspace_index_path"
          ],
          "signature": "(file_path: Path, project_root: Path) -> Optional[Dict]",
          "called_by": [
            "handle_file_update"
          ]
        },
        "handle_cross_workspace_file_move": {
          "doc": "Handle a file that has moved between workspaces.",
          "calls": [
            "get_workspace_index_path",
            "handle_cross_workspace_dependencies",
            "update_root_index_workspace_registry"
          ],
          "signature": "(move_info: Dict, project_root: Path) -> None",
          "called_by": [
            "handle_file_update"
          ]
        },
        "handle_file_update": {
          "decorators": [
            "performance_timing"
          ],
          "doc": "Handle a file update with workspace awareness.",
          "calls": [
            "detect_file_move",
            "get_workspace_config_cached",
            "get_workspace_for_file",
            "handle_cross_workspace_dependencies",
            "handle_cross_workspace_file_move",
            "update_file_in_index",
            "update_root_index_workspace_registry",
            "update_workspace_index"
          ],
          "signature": "(file_path: Path, project_root: Path) -> None",
          "called_by": [
            "main",
            "main"
          ]
        },
        "main": {
          "doc": "Process PostToolUse hook input and update index with workspace awareness.",
          "calls": [
            "handle_file_update"
          ],
          "signature": "()"
        }
      },
      "classes": {},
      "constants": {
        "CACHE_TTL": "number"
      },
      "call_graph": {}
    },
    "scripts/run_python.sh": {
      "language": "shell",
      "parsed": false
    },
    "scripts/find_python.sh": {
      "language": "shell",
      "parsed": true,
      "functions": {
        "find_python": "()"
      },
      "call_graph": {}
    },
    "scripts/workspace_indexer.py": {
      "language": "python",
      "parsed": true,
      "imports": [
        "json",
        "re",
        "ast",
        "pathlib",
        "typing",
        "datetime",
        "workspace_config",
        "index_utils",
        "cross_workspace_analyzer",
        "sys"
      ],
      "functions": {
        "index_workspace": {
          "calls": [
            "index_workspace"
          ],
          "signature": "(root_path: Union[str, Path], workspace_name: str) -> Optional[Dict]",
          "called_by": [
            "main",
            "index_workspace",
            "WorkspaceIndexer.index_all_workspaces"
          ]
        },
        "index_all_workspaces": {
          "calls": [
            "index_all_workspaces"
          ],
          "signature": "(root_path: Union[str, Path]) -> Dict[str, Dict]",
          "called_by": [
            "index_all_workspaces"
          ]
        }
      },
      "classes": {
        "CrossWorkspaceDependencyAnalyzer": {
          "methods": {
            "__init__": {
              "calls": [
                "_load_workspace_packages"
              ],
              "signature": "(self, registry: WorkspaceRegistry)"
            },
            "_load_workspace_packages": {
              "doc": "Load package.json from each workspace to understand package names.",
              "signature": "(self) -> Dict[str, Dict]",
              "called_by": [
                "CrossWorkspaceDependencyAnalyzer.__init__",
                "CrossWorkspaceAnalyzer.__init__"
              ]
            },
            "get_workspace_dependencies": {
              "doc": "Get comprehensive dependency information for a workspace.",
              "calls": [
                "analyze_file_imports"
              ],
              "signature": "(self, workspace_name: str) -> Dict[str, List[str]]",
              "called_by": [
                "WorkspaceIndexer.index_workspace"
              ]
            },
            "analyze_file_imports": {
              "doc": "Analyze imports in a file to find cross-workspace dependencies.",
              "calls": [
                "_analyze_javascript_imports",
                "_analyze_package_json_deps",
                "_analyze_python_imports"
              ],
              "signature": "(self, file_path: Path, workspace: WorkspaceConfig) -> List[str]",
              "called_by": [
                "CrossWorkspaceDependencyAnalyzer.get_workspace_dependencies",
                "WorkspaceIndexer.index_workspace"
              ]
            },
            "_analyze_python_imports": {
              "doc": "Analyze Python imports for cross-workspace dependencies.",
              "calls": [
                "_resolve_python_import_to_workspace"
              ],
              "signature": "(self, content: str, workspace: WorkspaceConfig) -> List[str]",
              "called_by": [
                "CrossWorkspaceAnalyzer._analyze_file_imports",
                "CrossWorkspaceDependencyAnalyzer.analyze_file_imports"
              ]
            },
            "_analyze_javascript_imports": {
              "doc": "Analyze JavaScript/TypeScript imports for cross-workspace dependencies.",
              "calls": [
                "_resolve_javascript_import_to_workspace"
              ],
              "signature": "(self, content: str, workspace: WorkspaceConfig) -> List[str]",
              "called_by": [
                "CrossWorkspaceAnalyzer._analyze_file_imports",
                "CrossWorkspaceDependencyAnalyzer.analyze_file_imports"
              ]
            },
            "_analyze_package_json_deps": {
              "doc": "Analyze package.json dependencies for cross-workspace dependencies.",
              "signature": "(self, content: str, workspace: WorkspaceConfig) -> List[str]",
              "called_by": [
                "CrossWorkspaceDependencyAnalyzer.analyze_file_imports"
              ]
            },
            "_resolve_python_import_to_workspace": {
              "doc": "Resolve a Python import to a workspace name.",
              "signature": "(self, import_path: str, current_workspace: WorkspaceConfig) -> Optional[str]",
              "called_by": [
                "CrossWorkspaceDependencyAnalyzer._analyze_python_imports"
              ]
            },
            "_resolve_javascript_import_to_workspace": {
              "doc": "Resolve a JavaScript/TypeScript import to a workspace name.",
              "signature": "(self, import_path: str, current_workspace: WorkspaceConfig) -> Optional[str]",
              "called_by": [
                "CrossWorkspaceDependencyAnalyzer._analyze_javascript_imports"
              ]
            }
          }
        },
        "WorkspaceIndexer": {
          "methods": {
            "__init__": "(self, registry: WorkspaceRegistry)",
            "index_workspace": {
              "calls": [
                "_build_workspace_dependency_graph",
                "_generate_workspace_tree",
                "_matches_ignore_patterns",
                "_parse_file_content",
                "analyze_file_imports",
                "get_workspace_dependencies"
              ],
              "signature": "(self, workspace_name: str) -> Optional[Dict]",
              "called_by": [
                "WorkspaceIndexer.index_all_workspaces",
                "index_workspace",
                "main"
              ]
            },
            "_matches_ignore_patterns": {
              "doc": "Check if a file path matches any ignore pattern.",
              "signature": "(self, file_path: str, patterns: Set[str]) -> bool",
              "called_by": [
                "WorkspaceIndexer.index_workspace"
              ]
            },
            "_generate_workspace_tree": {
              "doc": "Generate ASCII tree structure for workspace.",
              "calls": [
                "add_tree_level"
              ],
              "signature": "(self, workspace_path: Path, workspace_root: str) -> List[str]",
              "called_by": [
                "WorkspaceIndexer.index_workspace"
              ]
            },
            "add_tree_level": {
              "calls": [
                "add_tree_level"
              ],
              "signature": "(path: Path, prefix: str = \"\", depth: int = 0, max_depth: int = 3)",
              "called_by": [
                "generate_tree_structure",
                "WorkspaceIndexer.add_tree_level",
                "WorkspaceIndexer._generate_workspace_tree"
              ]
            },
            "_parse_file_content": {
              "doc": "Parse file content based on its extension.",
              "signature": "(self, content: str, file_extension: str) -> Optional[Dict]",
              "called_by": [
                "WorkspaceIndexer.index_workspace"
              ]
            },
            "_build_workspace_dependency_graph": {
              "doc": "Build dependency graph for the workspace.",
              "signature": "(self, files: Dict) -> Dict",
              "called_by": [
                "WorkspaceIndexer.index_workspace"
              ]
            },
            "index_all_workspaces": {
              "doc": "Index all workspaces in the registry.",
              "calls": [
                "index_workspace"
              ],
              "signature": "(self) -> Dict[str, Dict]",
              "called_by": [
                "index_all_workspaces"
              ]
            }
          },
          "doc": "Indexes individual workspaces with cross-workspace awareness.",
          "properties": [
            "workspace_name"
          ]
        }
      },
      "call_graph": {}
    },
    "examples/nx_example/package.json": {
      "language": "json",
      "parsed": false
    },
    "examples/nx_example/nx.json": {
      "language": "json",
      "parsed": false
    },
    "examples/lerna_example/package.json": {
      "language": "json",
      "parsed": false
    },
    "examples/lerna_example/lerna.json": {
      "language": "json",
      "parsed": false
    },
    "examples/manual_config_example/package.json": {
      "language": "json",
      "parsed": false
    },
    "examples/manual_config_example/.project-index-config.json": {
      "language": "json",
      "parsed": false,
      "purpose": "Configuration"
    },
    "examples/pnpm_example/package.json": {
      "language": "json",
      "parsed": false
    },
    "examples/pnpm_example/services/worker/package.json": {
      "language": "json",
      "parsed": false
    },
    "examples/pnpm_example/services/api/package.json": {
      "language": "json",
      "parsed": false
    },
    "examples/pnpm_example/apps/dashboard/package.json": {
      "language": "json",
      "parsed": false
    },
    "examples/pnpm_example/apps/frontend/package.json": {
      "language": "json",
      "parsed": false
    },
    "examples/pnpm_example/packages/database/package.json": {
      "language": "json",
      "parsed": false
    },
    "examples/pnpm_example/packages/common/package.json": {
      "language": "json",
      "parsed": false
    },
    "examples/pnpm_example/packages/auth/package.json": {
      "language": "json",
      "parsed": false
    },
    "examples/manual_config_example/shared/types/package.json": {
      "language": "json",
      "parsed": false
    },
    "examples/manual_config_example/shared/utils/package.json": {
      "language": "json",
      "parsed": false
    },
    "examples/manual_config_example/frontend/web/package.json": {
      "language": "json",
      "parsed": false
    },
    "examples/manual_config_example/frontend/mobile/package.json": {
      "language": "json",
      "parsed": false
    },
    "examples/manual_config_example/tools/cli/package.json": {
      "language": "json",
      "parsed": false
    },
    "examples/manual_config_example/backend/api/package.json": {
      "language": "json",
      "parsed": false
    },
    "examples/manual_config_example/backend/auth/package.json": {
      "language": "json",
      "parsed": false
    },
    "examples/lerna_example/apps/web/package.json": {
      "language": "json",
      "parsed": false
    },
    "examples/lerna_example/apps/api/package.json": {
      "language": "json",
      "parsed": false
    },
    "examples/lerna_example/packages/core/package.json": {
      "language": "json",
      "parsed": false
    },
    "examples/lerna_example/packages/ui/package.json": {
      "language": "json",
      "parsed": false
    },
    "examples/lerna_example/packages/utils/package.json": {
      "language": "json",
      "parsed": false
    },
    "examples/nx_example/apps/admin/package.json": {
      "language": "json",
      "parsed": false
    },
    "examples/nx_example/apps/mobile/package.json": {
      "language": "json",
      "parsed": false
    },
    "examples/nx_example/packages/web/package.json": {
      "language": "json",
      "parsed": false
    },
    "examples/nx_example/packages/api/package.json": {
      "language": "json",
      "parsed": false
    },
    "examples/nx_example/packages/shared/package.json": {
      "language": "json",
      "parsed": false
    },
    "tests/fixtures/pnpm_workspaces/package.json": {
      "language": "json",
      "parsed": false
    },
    "tests/fixtures/rush_monorepo/rush.json": {
      "language": "json",
      "parsed": false
    },
    "tests/fixtures/yarn_workspaces/package.json": {
      "language": "json",
      "parsed": false
    },
    "tests/fixtures/manual_config/.project-index-config.json": {
      "language": "json",
      "parsed": false,
      "purpose": "Configuration"
    },
    "tests/fixtures/nx_monorepo/expected_detection.json": {
      "language": "json",
      "parsed": false
    },
    "tests/fixtures/nx_monorepo/nx.json": {
      "language": "json",
      "parsed": false
    },
    "tests/fixtures/lerna_monorepo/package.json": {
      "language": "json",
      "parsed": false
    },
    "tests/fixtures/lerna_monorepo/expected_detection.json": {
      "language": "json",
      "parsed": false
    },
    "tests/fixtures/lerna_monorepo/lerna.json": {
      "language": "json",
      "parsed": false
    },
    "tests/fixtures/lerna_monorepo/packages/api/package.json": {
      "language": "json",
      "parsed": false
    },
    "tests/fixtures/nx_monorepo/packages/web/package.json": {
      "language": "json",
      "parsed": false
    },
    "tests/fixtures/nx_monorepo/packages/api/package.json": {
      "language": "json",
      "parsed": false
    },
    "tests/fixtures/nx_monorepo/packages/shared/package.json": {
      "language": "json",
      "parsed": false
    },
    "tests/fixtures/nx_monorepo/packages/shared/src/index.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Application entry point",
      "imports": [
        "lodash"
      ],
      "functions": {
        "validateUser": "(userData: any): userData is User",
        "formatUserName": "(user: User): string"
      },
      "classes": {},
      "constants": {
        "API_ENDPOINTS": "collection"
      },
      "interfaces": {
        "User": {}
      },
      "call_graph": {}
    },
    "tests/fixtures/nx_monorepo/packages/api/src/index.ts": {
      "language": "typescript",
      "parsed": false,
      "purpose": "Application entry point"
    },
    "tests/fixtures/manual_config/projects/app/package.json": {
      "language": "json",
      "parsed": false
    },
    "tests/fixtures/yarn_workspaces/packages/frontend/package.json": {
      "language": "json",
      "parsed": false
    },
    "tests/fixtures/rush_monorepo/apps/website/package.json": {
      "language": "json",
      "parsed": false
    },
    "tests/fixtures/pnpm_workspaces/packages/core/package.json": {
      "language": "json",
      "parsed": false
    },
    ".agent/logs/2025-08-18.json": {
      "language": "json",
      "parsed": false
    }
  },
  "dependency_graph": {
    "run_coverage.py": [
      "sys",
      "subprocess",
      "time",
      "pathlib"
    ],
    "scripts/reindex_if_needed_enhanced.py": [
      "json",
      "sys",
      "os",
      "subprocess",
      "time",
      "pathlib",
      "datetime",
      "typing",
      "workspace_config",
      "workspace_indexer"
    ],
    "scripts/cross_workspace_analyzer.py": [
      "json",
      "re",
      "ast",
      "os",
      "pathlib",
      "typing",
      "collections",
      "dataclasses",
      "workspace_config",
      "sys",
      "workspace_config"
    ],
    "scripts/project_index.py": [
      "json",
      "os",
      "re",
      "datetime",
      "pathlib",
      "typing",
      "index_utils",
      "workspace_config",
      "workspace_indexer",
      "cross_workspace_analyzer",
      "sys"
    ],
    "scripts/index_utils.py": [
      "re",
      "fnmatch",
      "pathlib",
      "typing"
    ],
    "scripts/update_index_enhanced.py": [
      "json",
      "sys",
      "os",
      "pathlib",
      "datetime",
      "typing",
      "time",
      "index_utils",
      "workspace_config",
      "workspace_indexer"
    ],
    "scripts/reindex_if_needed.py": [
      "json",
      "sys",
      "os",
      "subprocess",
      "time",
      "pathlib",
      "datetime",
      "typing",
      "workspace_config",
      "workspace_indexer"
    ],
    "scripts/detect_external_changes.py": [
      "os",
      "json",
      "subprocess",
      "pathlib",
      "datetime",
      "sys"
    ],
    "scripts/monorepo_detector.py": [
      "json",
      "re",
      "yaml",
      "pathlib",
      "typing",
      "sys"
    ],
    "scripts/parallel_workspace_processor.py": [
      "json",
      "time",
      "threading",
      "concurrent.futures",
      "dataclasses",
      "datetime",
      "pathlib",
      "typing",
      "queue",
      "traceback",
      "os",
      "psutil",
      "workspace_config",
      "workspace_indexer",
      "cross_workspace_analyzer",
      "performance_monitor",
      "sys",
      "argparse"
    ],
    "scripts/workspace_config.py": [
      "json",
      "re",
      "pathlib",
      "typing",
      "datetime",
      "monorepo_detector",
      "sys"
    ],
    "scripts/monorepo_commands.py": [
      "json",
      "sys",
      "time",
      "argparse",
      "pathlib",
      "typing",
      "datetime",
      "workspace_config",
      "parallel_workspace_processor",
      "performance_monitor",
      "project_index"
    ],
    "scripts/performance_monitor.py": [
      "json",
      "time",
      "pathlib",
      "datetime",
      "typing",
      "dataclasses",
      "collections",
      "threading",
      "os",
      "psutil",
      "sys"
    ],
    "scripts/update_index.py": [
      "json",
      "sys",
      "os",
      "pathlib",
      "datetime",
      "typing",
      "time",
      "performance_monitor",
      "index_utils",
      "workspace_config",
      "workspace_indexer",
      "cross_workspace_analyzer"
    ],
    "scripts/workspace_indexer.py": [
      "json",
      "re",
      "ast",
      "pathlib",
      "typing",
      "datetime",
      "workspace_config",
      "index_utils",
      "cross_workspace_analyzer",
      "sys"
    ],
    "tests/fixtures/nx_monorepo/packages/shared/src/index.ts": [
      "lodash"
    ]
  },
  "staleness_check": 1754934601.743771
}